{"version":3,"sources":["components/ExpandableSectionButton/ExpandableSectionButton.tsx","views/Farms/components/types.ts","utils/getLiquidityUrlPathParts.ts","views/Farms/components/FarmCard/DetailsSection.tsx","views/Farms/components/FarmCard/CardHeading.tsx","components/Modal/Spacer.tsx","components/Modal/ModalActions.tsx","components/Modal/ModalInput.tsx","views/Farms/components/DepositModal.tsx","views/Farms/components/WithdrawModal.tsx","views/Farms/hooks/useUnstakeFarms.ts","views/Farms/hooks/useStakeFarms.ts","views/Farms/components/FarmCard/StakeAction.tsx","views/Farms/hooks/useHarvestFarm.ts","views/Farms/components/FarmCard/HarvestAction.tsx","views/Farms/hooks/useApproveFarm.ts","views/Farms/components/FarmCard/CardActionsContainer.tsx","views/Farms/components/FarmCard/ApyButton.tsx","views/Farms/components/FarmCard/FarmCard.tsx","views/Farms/components/FarmTable/Apr.tsx","views/Farms/components/FarmTable/Farm.tsx","views/Farms/components/FarmTable/Earned.tsx","views/Farms/components/FarmTable/Details.tsx","views/Farms/components/FarmTable/Multiplier.tsx","views/Farms/components/FarmTable/Liquidity.tsx","views/Farms/components/FarmTable/Actions/styles.ts","views/Farms/components/FarmTable/Actions/HarvestAction.tsx","views/Farms/components/FarmTable/Actions/StakedAction.tsx","views/Farms/components/FarmTable/Actions/ActionPanel.tsx","views/Farms/components/FarmTable/CellLayout.tsx","views/Farms/components/FarmTable/Row.tsx","views/Farms/components/FarmTable/FarmTable.tsx","views/Farms/components/FarmTabButtons/index.tsx","views/Farms/components/ToggleView/ToggleView.tsx","views/Farms/Farms.tsx"],"names":["Wrapper","styled","div","theme","colors","secondary","ExpandableSectionButton","onClick","expanded","t","useTranslation","role","color","bold","defaultProps","ViewMode","getLiquidityUrlPathParts","quoteTokenAddress","tokenAddress","chainId","ContractAddress","networkId","wBNBAddressString","getWbnbAddress","quoteTokenAddressString","tokenAddressString","secondPart","StyledLinkExternal","LinkExternal","DetailsSection","bscScanAddress","infoAddress","removed","totalValueFormatted","lpLabel","addLiquidityUrl","justifyContent","width","height","href","symbol","Flex","MultiplierTag","Tag","CardHeading","multiplier","isCommunityFarm","token","quoteToken","alignItems","mb","variant","primaryToken","secondaryToken","flexDirection","split","StyledSpacer","props","size","Spacer","s","spacing","useContext","ThemeContext","StyledModalActions","primaryDark","StyledModalAction","ModalActions","children","l","React","Children","toArray","length","map","child","i","StyledTokenInput","input","isWarning","shadows","warning","inset","text","StyledInput","Input","mediaQueries","xs","sm","StyledErrorMessage","Text","ModalInput","max","onChange","onSelectMax","value","inputTitle","decimals","isBalanceZero","style","position","pl","fontSize","balance","balanceBigNumber","BigNumber","gt","lt","toLocaleString","toFixed","ROUND_DOWN","displayBalance","pattern","inputMode","step","min","placeholder","scale","mr","external","DepositModal","onConfirm","onDismiss","tokenName","useState","val","setVal","useToast","toastSuccess","toastError","pendingTx","setPendingTx","fullBalance","useMemo","getFullDisplayBalance","valNumber","fullBalanceNumber","handleChange","useCallback","e","currentTarget","validity","valid","replace","handleSelectMax","title","disabled","isFinite","eq","a","console","error","alignSelf","WithdrawModal","useUnstakeFarms","pid","masterChefContract","useMasterchef","onUnstake","amount","unstakeFarm","useStakeFarms","onStake","stakeFarm","txHash","info","IconButtonWrapper","StakeAction","stakedBalance","tokenBalance","location","useLocation","dispatch","useAppDispatch","account","useWeb3React","lpPrice","useLpTokenPrice","handleStake","fetchFarmUserDataAsync","pids","handleUnstake","stakedBalanceBigNumber","getBalanceAmount","useModal","onPresentDeposit","onPresentWithdraw","Balance","getBalanceNumber","times","unit","prefix","some","item","pathname","includes","useHarvestFarm","farmPid","onReward","harvestFarm","HarvestAction","earnings","cakePrice","usePriceCakeBusd","rawEarningsBalance","BIG_ZERO","earningsBusd","multipliedBy","toNumber","useApproveFarm","lpContract","onApprove","approve","address","ethers","constants","MaxUint256","tx","wait","receipt","status","Action","CardActions","farm","requestedApproval","setRequestedApproval","lpAddresses","userData","allowance","allowanceAsString","tokenBalanceAsString","stakedBalanceAsString","earningsAsString","lpAddress","getAddress","isApproved","isGreaterThan","useERC20","handleApprove","textTransform","pr","lpSymbol","mt","UnlockButton","ApyButton","apr","displayApr","ApyCalculatorModal","linkLabel","tokenPrice","linkHref","isFarm","onPresentApyModal","event","stopPropagation","ml","AccentGradient","keyframes","StyledCardAccent","primaryBright","FCard","card","background","Divider","cardBorder","ExpandingWrapper","FarmCard","showExpandableSection","setShowExpandableSection","liquidity","undefined","maximumFractionDigits","toUpperCase","earnLabel","dual","liquidityUrlPathParts","BASE_ADD_LIQUIDITY_URL","isPromotedFarm","isCommunity","display","CardActionsContainer","getBscScanLink","window","origin","Container","textSubtle","AprWrapper","Apr","originalValue","hideButton","TokenWrapper","Farm","label","useFarmUser","rawStakedBalance","Amount","span","earned","textDisabled","Earned","userDataReady","Details","ChevronDownIcon","toggled","actionPanelToggled","isMobile","useMatchBreakpoints","isXl","ReferenceElement","MultiplierWrapper","lg","Multiplier","displayMultiplier","toLowerCase","tooltipContent","useTooltip","placement","tooltipOffset","targetRef","tooltip","tooltipVisible","ref","LiquidityWrapper","Liquidity","displayLiquidity","Number","ActionContainer","xl","ActionTitles","ActionContent","earningsBigNumber","isZero","Staked","marginBottom","marginTop","expandAnimation","collapseAnimation","css","StakeContainer","TagsContainer","InfoContainer","ValueContainer","ValueWrapper","ActionPanel","details","isActive","bsc","StakedAction","Label","ContentContainer","CellLayout","MobileColumnSchema","id","name","sortable","DesktopColumnSchema","cells","CellInner","StyledTr","tr","EarnedMobileCell","td","AprMobileCell","FarmMobileCell","Row","hasStakedAmount","actionPanelExpanded","setActionPanelExpanded","shouldRenderChild","useDelayedUnmount","toggleActionPanel","useEffect","isXs","tableSchema","columnNames","column","Object","keys","key","columnIndex","indexOf","createElement","colSpan","dropShadow","TableWrapper","StyledTable","table","TableBody","tbody","TableContainer","ScrollButtonContainer","FarmTable","tableWrapperEl","useRef","data","columns","rows","useTable","sortColumn","row","original","current","scrollIntoView","behavior","FarmTabButtons","activeIndex","hasStakeInFinishedFarms","url","useRouteMatch","as","Link","to","show","ToggleView","viewMode","onToggle","handleToggle","mode","CARD","TABLE","ControlContainer","ToggleWrapper","LabelWrapper","FilterContainer","ViewControls","getDisplayApr","Image","cakeRewardsApr","lpRewardsApr","Farms","path","useFarms","farmsLP","userDataLoaded","query","setQuery","usePersistState","localStorageKey","setViewMode","sortOption","setSortOption","isArchived","isInactive","usePollFarmsData","stakedOnly","setStakedOnly","activeFarms","filter","isArchivedPid","inactiveFarms","archivedFarms","stakedOnlyFarms","stakedInactiveFarms","stakedArchivedFarms","farmsList","farmsToDisplay","farmsToDisplayWithAPR","lpTotalInQuoteToken","busdPrice","totalLiquidity","getFarmApr","poolWeight","ChainId","MAINNET","lowercaseQuery","latinise","loadMoreRef","numberOfFarmsVisible","setNumberOfFarmsVisible","observerIsSet","setObserverIsSet","farmsStakedMemoized","farmsStaked","farms","orderBy","slice","sortFarms","IntersectionObserver","entries","isIntersecting","farmsCurrentlyVisible","rootMargin","threshold","observe","rowData","PageHeader","Page","checked","Select","options","option","marginLeft","SearchInput","target","sort","b","exact","renderContent"],"mappings":"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","file":"static/js/8.7f0af8a6.chunk.js","sourcesContent":["import React from 'react'\r\nimport styled from 'styled-components'\r\nimport { ChevronDownIcon, ChevronUpIcon, Text } from '@pancakeswap/uikit'\r\nimport { useTranslation } from 'contexts/Localization'\r\n\r\nexport interface ExpandableSectionButtonProps {\r\n  onClick?: () => void\r\n  expanded?: boolean\r\n}\r\n\r\nconst Wrapper = styled.div`\r\n  display: flex;\r\n  align-items: center;\r\n  justify-content: center;\r\n  cursor: pointer;\r\n  svg {\r\n    fill: ${({ theme }) => theme.colors.secondary};\r\n  }\r\n`\r\n\r\nconst ExpandableSectionButton: React.FC<ExpandableSectionButtonProps> = ({ onClick, expanded }) => {\r\n  const { t } = useTranslation()\r\n\r\n  return (\r\n    <Wrapper aria-label={t('Hide or show expandable content')} role=\"button\" onClick={() => onClick()}>\r\n      <Text color=\"secondary\" bold>\r\n        {expanded ? t('Hide') : t('Details')}\r\n      </Text>\r\n      {expanded ? <ChevronUpIcon /> : <ChevronDownIcon />}\r\n    </Wrapper>\r\n  )\r\n}\r\n\r\nExpandableSectionButton.defaultProps = {\r\n  expanded: false,\r\n}\r\n\r\nexport default ExpandableSectionButton\r\n","export type TableProps = {\r\n  data?: TableDataTypes[]\r\n  selectedFilters?: string\r\n  sortBy?: string\r\n  sortDir?: string\r\n  onSort?: (value: string) => void\r\n}\r\n\r\nexport type ColumnsDefTypes = {\r\n  id: number\r\n  label: string\r\n  name: string\r\n  sortable: boolean\r\n}\r\n\r\nexport type ScrollBarProps = {\r\n  ref: string\r\n  width: number\r\n}\r\n\r\nexport type TableDataTypes = {\r\n  POOL: string\r\n  APR: string\r\n  EARNED: string\r\n  STAKED: string\r\n  DETAILS: string\r\n  LINKS: string\r\n}\r\n\r\nexport const MobileColumnSchema: ColumnsDefTypes[] = [\r\n  {\r\n    id: 1,\r\n    name: 'farm',\r\n    sortable: true,\r\n    label: '',\r\n  },\r\n  {\r\n    id: 2,\r\n    name: 'earned',\r\n    sortable: true,\r\n    label: 'Earned',\r\n  },\r\n  {\r\n    id: 3,\r\n    name: 'apr',\r\n    sortable: true,\r\n    label: 'APR',\r\n  },\r\n  {\r\n    id: 6,\r\n    name: 'details',\r\n    sortable: true,\r\n    label: '',\r\n  },\r\n]\r\n\r\nexport const DesktopColumnSchema: ColumnsDefTypes[] = [\r\n  {\r\n    id: 1,\r\n    name: 'farm',\r\n    sortable: true,\r\n    label: '',\r\n  },\r\n  {\r\n    id: 2,\r\n    name: 'earned',\r\n    sortable: true,\r\n    label: 'Earned',\r\n  },\r\n  {\r\n    id: 3,\r\n    name: 'apr',\r\n    sortable: true,\r\n    label: 'APR',\r\n  },\r\n  {\r\n    id: 4,\r\n    name: 'liquidity',\r\n    sortable: true,\r\n    label: 'Liquidity',\r\n  },\r\n  {\r\n    id: 5,\r\n    name: 'multiplier',\r\n    sortable: true,\r\n    label: 'Multiplier',\r\n  },\r\n  {\r\n    id: 6,\r\n    name: 'details',\r\n    sortable: true,\r\n    label: '',\r\n  },\r\n]\r\n\r\nexport enum ViewMode {\r\n  'TABLE' = 'TABLE',\r\n  'CARD' = 'CARD',\r\n}\r\n","// Constructing the two forward-slash-separated parts of the 'Add Liquidity' URL\r\n// Each part of the url represents a different side of the LP pair.\r\nimport { getWbnbAddress } from './addressHelpers';\r\nimport ContractAddress from '../config/constants/contracts';\r\n\r\nconst getLiquidityUrlPathParts = ({ quoteTokenAddress, tokenAddress }) => {\r\n  const chainId = ContractAddress.networkId;\r\n  const wBNBAddressString = getWbnbAddress()\r\n  const quoteTokenAddressString: string = quoteTokenAddress ? quoteTokenAddress[chainId] : null\r\n  const tokenAddressString: string = tokenAddress ? tokenAddress[chainId] : null\r\n  const firstPart =\r\n    !quoteTokenAddressString || quoteTokenAddressString === wBNBAddressString ? 'CXS' : quoteTokenAddressString\r\n  const secondPart = !tokenAddressString || tokenAddressString === wBNBAddressString ? 'CXS' : tokenAddressString\r\n  return `${firstPart}/${secondPart}`\r\n}\r\n\r\nexport default getLiquidityUrlPathParts\r\n","import React from 'react'\r\nimport { useTranslation } from 'contexts/Localization'\r\nimport styled from 'styled-components'\r\nimport { Text, Flex, LinkExternal, Skeleton } from '@pancakeswap/uikit'\r\n\r\nexport interface ExpandableSectionProps {\r\n  bscScanAddress?: string\r\n  infoAddress?: string\r\n  removed?: boolean\r\n  totalValueFormatted?: string\r\n  lpLabel?: string\r\n  addLiquidityUrl?: string\r\n}\r\n\r\nconst Wrapper = styled.div`\r\n  margin-top: 24px;\r\n`\r\n\r\nconst StyledLinkExternal = styled(LinkExternal)`\r\n  font-weight: 400;\r\n`\r\n\r\nconst DetailsSection: React.FC<ExpandableSectionProps> = ({\r\n  bscScanAddress,\r\n  infoAddress,\r\n  removed,\r\n  totalValueFormatted,\r\n  lpLabel,\r\n  addLiquidityUrl,\r\n}) => {\r\n  const { t } = useTranslation()\r\n\r\n  return (\r\n    <Wrapper>\r\n      <Flex justifyContent=\"space-between\">\r\n        <Text>{t('Total Liquidity')}:</Text>\r\n        {totalValueFormatted ? <Text>{totalValueFormatted}</Text> : <Skeleton width={75} height={25} />}\r\n      </Flex>\r\n      {!removed && (\r\n        <StyledLinkExternal href={addLiquidityUrl}>{t('Get %symbol%', { symbol: lpLabel })}</StyledLinkExternal>\r\n      )}\r\n      <StyledLinkExternal href={bscScanAddress}>{t('View Contract')}</StyledLinkExternal>\r\n      <StyledLinkExternal href={infoAddress}>{t('See Pair Info')}</StyledLinkExternal>\r\n    </Wrapper>\r\n  )\r\n}\r\n\r\nexport default DetailsSection\r\n","import React from 'react'\r\nimport styled from 'styled-components'\r\nimport { Tag, Flex, Heading } from '@pancakeswap/uikit'\r\nimport { CommunityTag, CoreTag } from 'components/Tags'\r\nimport { Token } from 'config/constants/types'\r\nimport { TokenPairImage } from 'components/TokenImage'\r\n\r\nexport interface ExpandableSectionProps {\r\n  lpLabel?: string\r\n  multiplier?: string\r\n  isCommunityFarm?: boolean\r\n  token: Token\r\n  quoteToken: Token\r\n}\r\n\r\nconst Wrapper = styled(Flex)`\r\n  svg {\r\n    margin-right: 4px;\r\n  }\r\n`\r\n\r\nconst MultiplierTag = styled(Tag)`\r\n  margin-left: 4px;\r\n`\r\n\r\nconst CardHeading: React.FC<ExpandableSectionProps> = ({ lpLabel, multiplier, isCommunityFarm, token, quoteToken }) => {\r\n  return (\r\n    <Wrapper justifyContent=\"space-between\" alignItems=\"center\" mb=\"12px\">\r\n      <TokenPairImage variant=\"inverted\" primaryToken={token} secondaryToken={quoteToken} width={64} height={64} />\r\n      <Flex flexDirection=\"column\" alignItems=\"flex-end\">\r\n        <Heading mb=\"4px\">{lpLabel.split(' ')[0]}</Heading>\r\n        <Flex justifyContent=\"center\">\r\n          {isCommunityFarm ? <CommunityTag /> : <CoreTag />}\r\n          <MultiplierTag variant=\"secondary\">{multiplier}</MultiplierTag>\r\n        </Flex>\r\n      </Flex>\r\n    </Wrapper>\r\n  )\r\n}\r\n\r\nexport default CardHeading\r\n","import React, { useContext } from 'react'\r\nimport styled, { ThemeContext } from 'styled-components'\r\n\r\ninterface SpacerProps {\r\n  size?: 'sm' | 'md' | 'lg'\r\n}\r\n\r\nconst Spacer: React.FC<SpacerProps> = ({ size = 'md' }) => {\r\n  const { spacing } = useContext(ThemeContext)\r\n\r\n  let s: number\r\n  switch (size) {\r\n    case 'lg':\r\n      s = spacing[6]\r\n      break\r\n    case 'sm':\r\n      s = spacing[2]\r\n      break\r\n    case 'md':\r\n    default:\r\n      s = spacing[4]\r\n  }\r\n\r\n  return <StyledSpacer size={s} />\r\n}\r\n\r\ninterface StyledSpacerProps {\r\n  size: number\r\n}\r\n\r\nconst StyledSpacer = styled.div<StyledSpacerProps>`\r\n  height: ${(props) => props.size}px;\r\n  width: ${(props) => props.size}px;\r\n`\r\n\r\nexport default Spacer\r\n","import React from 'react'\r\nimport styled from 'styled-components'\r\nimport Spacer from './Spacer'\r\n\r\nconst ModalActions: React.FC = ({ children }) => {\r\n  const l = React.Children.toArray(children).length\r\n  return (\r\n    <StyledModalActions>\r\n      {React.Children.map(children, (child, i) => (\r\n        <>\r\n          <StyledModalAction>{child}</StyledModalAction>\r\n          {i < l - 1 && <Spacer />}\r\n        </>\r\n      ))}\r\n    </StyledModalActions>\r\n  )\r\n}\r\n\r\nconst StyledModalActions = styled.div`\r\n  align-items: center;\r\n  background-color: ${(props) => props.theme.colors.primaryDark}00;\r\n  display: flex;\r\n  margin: 0;\r\n  padding: ${(props) => props.theme.spacing[4]}px 0;\r\n`\r\n\r\nconst StyledModalAction = styled.div`\r\n  flex: 1;\r\n`\r\n\r\nexport default ModalActions\r\n","import React from 'react'\r\nimport styled from 'styled-components'\r\nimport { Text, Button, Input, InputProps, Flex, Link } from '@pancakeswap/uikit'\r\nimport { useTranslation } from 'contexts/Localization'\r\nimport { BigNumber } from 'bignumber.js'\r\n\r\ninterface ModalInputProps {\r\n  max: string\r\n  symbol: string\r\n  onSelectMax?: () => void\r\n  onChange: (e: React.FormEvent<HTMLInputElement>) => void\r\n  placeholder?: string\r\n  value: string\r\n  addLiquidityUrl?: string\r\n  inputTitle?: string\r\n  decimals?: number\r\n}\r\n\r\nconst getBoxShadow = ({ isWarning = false, theme }) => {\r\n  if (isWarning) {\r\n    return theme.shadows.warning\r\n  }\r\n\r\n  return theme.shadows.inset\r\n}\r\n\r\nconst StyledTokenInput = styled.div<InputProps>`\r\n  display: flex;\r\n  flex-direction: column;\r\n  background-color: ${({ theme }) => theme.colors.input};\r\n  border-radius: 16px;\r\n  box-shadow: ${getBoxShadow};\r\n  color: ${({ theme }) => theme.colors.text};\r\n  padding: 8px 16px 8px 0;\r\n  width: 100%;\r\n`\r\n\r\nconst StyledInput = styled(Input)`\r\n  box-shadow: none;\r\n  width: 60px;\r\n  margin: 0 8px;\r\n  padding: 0 8px;\r\n\r\n  ${({ theme }) => theme.mediaQueries.xs} {\r\n    width: 80px;\r\n  }\r\n\r\n  ${({ theme }) => theme.mediaQueries.sm} {\r\n    width: auto;\r\n  }\r\n`\r\n\r\nconst StyledErrorMessage = styled(Text)`\r\n  position: absolute;\r\n  bottom: -22px;\r\n  a {\r\n    display: inline;\r\n  }\r\n`\r\n\r\nconst ModalInput: React.FC<ModalInputProps> = ({\r\n  max,\r\n  symbol,\r\n  onChange,\r\n  onSelectMax,\r\n  value,\r\n  addLiquidityUrl,\r\n  inputTitle,\r\n  decimals = 18,\r\n}) => {\r\n  const { t } = useTranslation()\r\n  const isBalanceZero = max === '0' || !max\r\n\r\n  const displayBalance = (balance: string) => {\r\n    if (isBalanceZero) {\r\n      return '0'\r\n    }\r\n    const balanceBigNumber = new BigNumber(balance)\r\n    if (balanceBigNumber.gt(0) && balanceBigNumber.lt(0.0001)) {\r\n      return balanceBigNumber.toLocaleString()\r\n    }\r\n    return balanceBigNumber.toFixed(3, BigNumber.ROUND_DOWN)\r\n  }\r\n\r\n  return (\r\n    <div style={{ position: 'relative' }}>\r\n      <StyledTokenInput isWarning={isBalanceZero}>\r\n        <Flex justifyContent=\"space-between\" pl=\"16px\">\r\n          <Text fontSize=\"14px\">{inputTitle}</Text>\r\n          <Text fontSize=\"14px\">{t('Balance: %balance%', { balance: displayBalance(max) })}</Text>\r\n        </Flex>\r\n        <Flex alignItems=\"flex-end\" justifyContent=\"space-around\">\r\n          <StyledInput\r\n            pattern={`^[0-9]*[.,]?[0-9]{0,${decimals}}$`}\r\n            inputMode=\"decimal\"\r\n            step=\"any\"\r\n            min=\"0\"\r\n            onChange={onChange}\r\n            placeholder=\"0\"\r\n            value={value}\r\n          />\r\n          <Button scale=\"sm\" onClick={onSelectMax} mr=\"8px\">\r\n            {t('Max')}\r\n          </Button>\r\n          <Text fontSize=\"16px\">{symbol}</Text>\r\n        </Flex>\r\n      </StyledTokenInput>\r\n      {isBalanceZero && (\r\n        <StyledErrorMessage fontSize=\"14px\" color=\"failure\">\r\n          {t('No tokens to stake')}:{' '}\r\n          <Link fontSize=\"14px\" bold={false} href={addLiquidityUrl} external color=\"failure\">\r\n            {t('Get %symbol%', { symbol })}\r\n          </Link>\r\n        </StyledErrorMessage>\r\n      )}\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default ModalInput\r\n","import BigNumber from 'bignumber.js'\r\nimport React, { useCallback, useMemo, useState } from 'react'\r\nimport { Button, Modal, LinkExternal } from '@pancakeswap/uikit'\r\nimport { ModalActions, ModalInput } from 'components/Modal'\r\nimport { useTranslation } from 'contexts/Localization'\r\nimport { getFullDisplayBalance } from 'utils/formatBalance'\r\nimport useToast from 'hooks/useToast'\r\n\r\ninterface DepositModalProps {\r\n  max: BigNumber\r\n  onConfirm: (amount: string) => void\r\n  onDismiss?: () => void\r\n  tokenName?: string\r\n  addLiquidityUrl?: string\r\n}\r\n\r\nconst DepositModal: React.FC<DepositModalProps> = ({ max, onConfirm, onDismiss, tokenName = '', addLiquidityUrl }) => {\r\n  const [val, setVal] = useState('')\r\n  const { toastSuccess, toastError } = useToast()\r\n  const [pendingTx, setPendingTx] = useState(false)\r\n  const { t } = useTranslation()\r\n  const fullBalance = useMemo(() => {\r\n    return getFullDisplayBalance(max)\r\n  }, [max])\r\n\r\n  const valNumber = new BigNumber(val)\r\n  const fullBalanceNumber = new BigNumber(fullBalance)\r\n\r\n  const handleChange = useCallback(\r\n    (e: React.FormEvent<HTMLInputElement>) => {\r\n      if (e.currentTarget.validity.valid) {\r\n        setVal(e.currentTarget.value.replace(/,/g, '.'))\r\n      }\r\n    },\r\n    [setVal],\r\n  )\r\n\r\n  const handleSelectMax = useCallback(() => {\r\n    setVal(fullBalance)\r\n  }, [fullBalance, setVal])\r\n\r\n  return (\r\n    <Modal title={t('Stake LP tokens')} onDismiss={onDismiss}>\r\n      <ModalInput\r\n        value={val}\r\n        onSelectMax={handleSelectMax}\r\n        onChange={handleChange}\r\n        max={fullBalance}\r\n        symbol={tokenName}\r\n        addLiquidityUrl={addLiquidityUrl}\r\n        inputTitle={t('Stake')}\r\n      />\r\n      <ModalActions>\r\n        <Button variant=\"secondary\" onClick={onDismiss} width=\"100%\" disabled={pendingTx}>\r\n          {t('Cancel')}\r\n        </Button>\r\n        <Button\r\n          width=\"100%\"\r\n          disabled={pendingTx || !valNumber.isFinite() || valNumber.eq(0) || valNumber.gt(fullBalanceNumber)}\r\n          onClick={async () => {\r\n            setPendingTx(true)\r\n            try {\r\n              await onConfirm(val)\r\n              toastSuccess(t('Staked!'), t('Your funds have been staked in the farm'))\r\n              onDismiss()\r\n            } catch (e) {\r\n              toastError(\r\n                t('Error'),\r\n                t('Please try again. Confirm the transaction and make sure you are paying enough gas!'),\r\n              )\r\n              console.error(e)\r\n            } finally {\r\n              setPendingTx(false)\r\n            }\r\n          }}\r\n        >\r\n          {pendingTx ? t('Pending Confirmation') : t('Confirm')}\r\n        </Button>\r\n      </ModalActions>\r\n      <LinkExternal href={addLiquidityUrl} style={{ alignSelf: 'center' }}>\r\n        {t('Get %symbol%', { symbol: tokenName })}\r\n      </LinkExternal>\r\n    </Modal>\r\n  )\r\n}\r\n\r\nexport default DepositModal\r\n","import BigNumber from 'bignumber.js'\r\nimport React, { useCallback, useMemo, useState } from 'react'\r\nimport { Button, Modal } from '@pancakeswap/uikit'\r\nimport { ModalActions, ModalInput } from 'components/Modal'\r\nimport { useTranslation } from 'contexts/Localization'\r\nimport { getFullDisplayBalance } from 'utils/formatBalance'\r\nimport useToast from 'hooks/useToast'\r\n\r\ninterface WithdrawModalProps {\r\n  max: BigNumber\r\n  onConfirm: (amount: string) => void\r\n  onDismiss?: () => void\r\n  tokenName?: string\r\n}\r\n\r\nconst WithdrawModal: React.FC<WithdrawModalProps> = ({ onConfirm, onDismiss, max, tokenName = '' }) => {\r\n  const [val, setVal] = useState('')\r\n  const { toastSuccess, toastError } = useToast()\r\n  const [pendingTx, setPendingTx] = useState(false)\r\n  const { t } = useTranslation()\r\n  const fullBalance = useMemo(() => {\r\n    return getFullDisplayBalance(max)\r\n  }, [max])\r\n\r\n  const valNumber = new BigNumber(val)\r\n  const fullBalanceNumber = new BigNumber(fullBalance)\r\n\r\n  const handleChange = useCallback(\r\n    (e: React.FormEvent<HTMLInputElement>) => {\r\n      if (e.currentTarget.validity.valid) {\r\n        setVal(e.currentTarget.value.replace(/,/g, '.'))\r\n      }\r\n    },\r\n    [setVal],\r\n  )\r\n\r\n  const handleSelectMax = useCallback(() => {\r\n    setVal(fullBalance)\r\n  }, [fullBalance, setVal])\r\n\r\n  return (\r\n    <Modal title={t('Unstake LP tokens')} onDismiss={onDismiss}>\r\n      <ModalInput\r\n        onSelectMax={handleSelectMax}\r\n        onChange={handleChange}\r\n        value={val}\r\n        max={fullBalance}\r\n        symbol={tokenName}\r\n        inputTitle={t('Unstake')}\r\n      />\r\n      <ModalActions>\r\n        <Button variant=\"secondary\" onClick={onDismiss} width=\"100%\" disabled={pendingTx}>\r\n          {t('Cancel')}\r\n        </Button>\r\n        <Button\r\n          disabled={pendingTx || !valNumber.isFinite() || valNumber.eq(0) || valNumber.gt(fullBalanceNumber)}\r\n          onClick={async () => {\r\n            setPendingTx(true)\r\n            try {\r\n              await onConfirm(val)\r\n              toastSuccess(t('Unstaked!'), t('Your earnings have also been harvested to your wallet'))\r\n              onDismiss()\r\n            } catch (e) {\r\n              toastError(\r\n                t('Error'),\r\n                t('Please try again. Confirm the transaction and make sure you are paying enough gas!'),\r\n              )\r\n              console.error(e)\r\n            } finally {\r\n              setPendingTx(false)\r\n            }\r\n          }}\r\n          width=\"100%\"\r\n        >\r\n          {pendingTx ? t('Pending Confirmation') : t('Confirm')}\r\n        </Button>\r\n      </ModalActions>\r\n    </Modal>\r\n  )\r\n}\r\n\r\nexport default WithdrawModal\r\n","import { useCallback } from 'react'\r\nimport { unstakeFarm } from 'utils/calls'\r\nimport { useMasterchef } from 'hooks/useContract'\r\n\r\nconst useUnstakeFarms = (pid: number) => {\r\n  const masterChefContract = useMasterchef()\r\n\r\n  const handleUnstake = useCallback(\r\n    async (amount: string) => {\r\n      await unstakeFarm(masterChefContract, pid, amount)\r\n    },\r\n    [masterChefContract, pid],\r\n  )\r\n\r\n  return { onUnstake: handleUnstake }\r\n}\r\n\r\nexport default useUnstakeFarms\r\n","import { useCallback } from 'react'\r\nimport { stakeFarm } from 'utils/calls'\r\nimport { useMasterchef } from 'hooks/useContract'\r\n\r\nconst useStakeFarms = (pid: number) => {\r\n  const masterChefContract = useMasterchef()\r\n\r\n  const handleStake = useCallback(\r\n    async (amount: string) => {\r\n      const txHash = await stakeFarm(masterChefContract, pid, amount)\r\n      console.info(txHash)\r\n    },\r\n    [masterChefContract, pid],\r\n  )\r\n\r\n  return { onStake: handleStake }\r\n}\r\n\r\nexport default useStakeFarms\r\n","import React, { useCallback } from 'react'\r\nimport { useWeb3React } from '@web3-react/core'\r\nimport styled from 'styled-components'\r\nimport BigNumber from 'bignumber.js'\r\nimport { Button, Flex, Heading, IconButton, AddIcon, MinusIcon, useModal } from '@pancakeswap/uikit'\r\nimport { useLocation } from 'react-router-dom'\r\nimport Balance from 'components/Balance'\r\nimport { useTranslation } from 'contexts/Localization'\r\nimport { useAppDispatch } from 'state'\r\nimport { fetchFarmUserDataAsync } from 'state/farms'\r\nimport { useLpTokenPrice } from 'state/hooks'\r\nimport { getBalanceAmount, getBalanceNumber, getFullDisplayBalance } from 'utils/formatBalance'\r\nimport DepositModal from '../DepositModal'\r\nimport WithdrawModal from '../WithdrawModal'\r\nimport useUnstakeFarms from '../../hooks/useUnstakeFarms'\r\nimport useStakeFarms from '../../hooks/useStakeFarms'\r\n\r\ninterface FarmCardActionsProps {\r\n  stakedBalance?: BigNumber\r\n  tokenBalance?: BigNumber\r\n  tokenName?: string\r\n  pid?: number\r\n  addLiquidityUrl?: string\r\n}\r\n\r\nconst IconButtonWrapper = styled.div`\r\n  display: flex;\r\n  svg {\r\n    width: 20px;\r\n  }\r\n`\r\n\r\nconst StakeAction: React.FC<FarmCardActionsProps> = ({\r\n  stakedBalance,\r\n  tokenBalance,\r\n  tokenName,\r\n  pid,\r\n  addLiquidityUrl,\r\n}) => {\r\n  const { t } = useTranslation()\r\n  const { onStake } = useStakeFarms(pid)\r\n  const { onUnstake } = useUnstakeFarms(pid)\r\n  const location = useLocation()\r\n  const dispatch = useAppDispatch()\r\n  const { account } = useWeb3React()\r\n  const lpPrice = useLpTokenPrice(tokenName)\r\n\r\n  const handleStake = async (amount: string) => {\r\n    await onStake(amount)\r\n    dispatch(fetchFarmUserDataAsync({ account, pids: [pid] }))\r\n  }\r\n\r\n  const handleUnstake = async (amount: string) => {\r\n    await onUnstake(amount)\r\n    dispatch(fetchFarmUserDataAsync({ account, pids: [pid] }))\r\n  }\r\n\r\n  const displayBalance = useCallback(() => {\r\n    const stakedBalanceBigNumber = getBalanceAmount(stakedBalance)\r\n    if (stakedBalanceBigNumber.gt(0) && stakedBalanceBigNumber.lt(0.0001)) {\r\n      return getFullDisplayBalance(stakedBalance).toLocaleString()\r\n    }\r\n    return stakedBalanceBigNumber.toFixed(3, BigNumber.ROUND_DOWN)\r\n  }, [stakedBalance])\r\n\r\n  const [onPresentDeposit] = useModal(\r\n    <DepositModal max={tokenBalance} onConfirm={handleStake} tokenName={tokenName} addLiquidityUrl={addLiquidityUrl} />,\r\n  )\r\n  const [onPresentWithdraw] = useModal(\r\n    <WithdrawModal max={stakedBalance} onConfirm={handleUnstake} tokenName={tokenName} />,\r\n  )\r\n\r\n  const renderStakingButtons = () => {\r\n    return stakedBalance.eq(0) ? (\r\n      <Button\r\n        onClick={onPresentDeposit}\r\n        disabled={['history', 'archived'].some((item) => location.pathname.includes(item))}\r\n      >\r\n        {t('Stake LP')}\r\n      </Button>\r\n    ) : (\r\n      <IconButtonWrapper>\r\n        <IconButton variant=\"danger\" onClick={onPresentWithdraw} mr=\"6px\">\r\n          <MinusIcon color=\"primary\" width=\"14px\" />\r\n        </IconButton>\r\n        <IconButton\r\n          variant=\"danger\"\r\n          onClick={onPresentDeposit}\r\n          disabled={['history', 'archived'].some((item) => location.pathname.includes(item))}\r\n        >\r\n          <AddIcon color=\"danger\" width=\"14px\" />\r\n        </IconButton>\r\n      </IconButtonWrapper>\r\n    )\r\n  }\r\n\r\n  return (\r\n    <Flex justifyContent=\"space-between\" alignItems=\"center\">\r\n      <Flex flexDirection=\"column\" alignItems=\"flex-start\">\r\n        <Heading color={stakedBalance.eq(0) ? 'textDisabled' : 'text'}>{displayBalance()}</Heading>\r\n        {stakedBalance.gt(0) && lpPrice.gt(0) && (\r\n          <Balance\r\n            fontSize=\"12px\"\r\n            color=\"textSubtle\"\r\n            decimals={2}\r\n            value={getBalanceNumber(lpPrice.times(stakedBalance))}\r\n            unit=\" USD\"\r\n            prefix=\"~\"\r\n          />\r\n        )}\r\n      </Flex>\r\n      {renderStakingButtons()}\r\n    </Flex>\r\n  )\r\n}\r\n\r\nexport default StakeAction\r\n","import { useCallback } from 'react'\r\nimport { harvestFarm } from 'utils/calls'\r\nimport { useMasterchef } from 'hooks/useContract'\r\n\r\nconst useHarvestFarm = (farmPid: number) => {\r\n  const masterChefContract = useMasterchef()\r\n\r\n  const handleHarvest = useCallback(async () => {\r\n    await harvestFarm(masterChefContract, farmPid)\r\n  }, [farmPid, masterChefContract])\r\n\r\n  return { onReward: handleHarvest }\r\n}\r\n\r\nexport default useHarvestFarm\r\n","import React, { useState } from 'react'\r\nimport BigNumber from 'bignumber.js'\r\nimport { Button, Flex, Heading } from '@pancakeswap/uikit'\r\nimport { useTranslation } from 'contexts/Localization'\r\nimport { useAppDispatch } from 'state'\r\nimport { fetchFarmUserDataAsync } from 'state/farms'\r\nimport useToast from 'hooks/useToast'\r\nimport { getBalanceAmount } from 'utils/formatBalance'\r\nimport { BIG_ZERO } from 'utils/bigNumber'\r\nimport { useWeb3React } from '@web3-react/core'\r\nimport { usePriceCakeBusd } from 'state/hooks'\r\nimport Balance from 'components/Balance'\r\nimport useHarvestFarm from '../../hooks/useHarvestFarm'\r\n\r\ninterface FarmCardActionsProps {\r\n  earnings?: BigNumber\r\n  pid?: number\r\n}\r\n\r\nconst HarvestAction: React.FC<FarmCardActionsProps> = ({ earnings, pid }) => {\r\n  const { account } = useWeb3React()\r\n  const { toastSuccess, toastError } = useToast()\r\n  const { t } = useTranslation()\r\n  const [pendingTx, setPendingTx] = useState(false)\r\n  const { onReward } = useHarvestFarm(pid)\r\n  const cakePrice = usePriceCakeBusd()\r\n  const dispatch = useAppDispatch()\r\n  const rawEarningsBalance = account ? getBalanceAmount(earnings) : BIG_ZERO\r\n  const displayBalance = rawEarningsBalance.toFixed(3, BigNumber.ROUND_DOWN)\r\n  const earningsBusd = rawEarningsBalance ? rawEarningsBalance.multipliedBy(cakePrice).toNumber() : 0\r\n\r\n  return (\r\n    <Flex mb=\"8px\" justifyContent=\"space-between\" alignItems=\"center\">\r\n      <Flex flexDirection=\"column\" alignItems=\"flex-start\">\r\n        <Heading color={rawEarningsBalance.eq(0) ? 'textDisabled' : 'text'}>{displayBalance}</Heading>\r\n        {earningsBusd > 0 && (\r\n          <Balance fontSize=\"12px\" color=\"textSubtle\" decimals={2} value={earningsBusd} unit=\" USD\" prefix=\"~\" />\r\n        )}\r\n      </Flex>\r\n      <Button\r\n        disabled={rawEarningsBalance.eq(0) || pendingTx}\r\n        onClick={async () => {\r\n          setPendingTx(true)\r\n          try {\r\n            await onReward()\r\n            toastSuccess(\r\n              `${t('Harvested')}!`,\r\n              t('Your %symbol% earnings have been sent to your wallet!', { symbol: 'PCN' }),\r\n            )\r\n          } catch (e) {\r\n            toastError(\r\n              t('Error'),\r\n              t('Please try again. Confirm the transaction and make sure you are paying enough gas!'),\r\n            )\r\n            console.error(e)\r\n          } finally {\r\n            setPendingTx(false)\r\n          }\r\n          dispatch(fetchFarmUserDataAsync({ account, pids: [pid] }))\r\n        }}\r\n      >\r\n        {t('Harvest')}\r\n      </Button>\r\n    </Flex>\r\n  )\r\n}\r\n\r\nexport default HarvestAction\r\n","import { useCallback } from 'react'\r\nimport { ethers, Contract } from 'ethers'\r\nimport { useMasterchef } from 'hooks/useContract'\r\n\r\nconst useApproveFarm = (lpContract: Contract) => {\r\n  const masterChefContract = useMasterchef()\r\n  const handleApprove = useCallback(async () => {\r\n    try {\r\n      const tx = await lpContract.approve(masterChefContract.address, ethers.constants.MaxUint256)\r\n      const receipt = await tx.wait()\r\n      return receipt.status\r\n    } catch (e) {\r\n      return false\r\n    }\r\n  }, [lpContract, masterChefContract])\r\n\r\n  return { onApprove: handleApprove }\r\n}\r\n\r\nexport default useApproveFarm\r\n","import React, { useState, useCallback } from 'react'\r\nimport styled from 'styled-components'\r\nimport BigNumber from 'bignumber.js'\r\nimport { Button, Flex, Text } from '@pancakeswap/uikit'\r\nimport { getAddress } from 'utils/addressHelpers'\r\nimport { useAppDispatch } from 'state'\r\nimport { fetchFarmUserDataAsync } from 'state/farms'\r\nimport { Farm } from 'state/types'\r\nimport { useTranslation } from 'contexts/Localization'\r\nimport { useERC20 } from 'hooks/useContract'\r\nimport UnlockButton from 'components/UnlockButton'\r\nimport StakeAction from './StakeAction'\r\nimport HarvestAction from './HarvestAction'\r\nimport useApproveFarm from '../../hooks/useApproveFarm'\r\n\r\nconst Action = styled.div`\r\n  padding-top: 16px;\r\n`\r\nexport interface FarmWithStakedValue extends Farm {\r\n  apr?: number\r\n}\r\n\r\ninterface FarmCardActionsProps {\r\n  farm: FarmWithStakedValue\r\n  account?: string\r\n  addLiquidityUrl?: string\r\n}\r\n\r\nconst CardActions: React.FC<FarmCardActionsProps> = ({ farm, account, addLiquidityUrl }) => {\r\n  const { t } = useTranslation()\r\n  const [requestedApproval, setRequestedApproval] = useState(false)\r\n  const { pid, lpAddresses } = farm\r\n  const {\r\n    allowance: allowanceAsString = 0,\r\n    tokenBalance: tokenBalanceAsString = 0,\r\n    stakedBalance: stakedBalanceAsString = 0,\r\n    earnings: earningsAsString = 0,\r\n  } = farm.userData || {}\r\n  const allowance = new BigNumber(allowanceAsString)\r\n  const tokenBalance = new BigNumber(tokenBalanceAsString)\r\n  const stakedBalance = new BigNumber(stakedBalanceAsString)\r\n  const earnings = new BigNumber(earningsAsString)\r\n  const lpAddress = getAddress(lpAddresses)\r\n  const isApproved = account && allowance && allowance.isGreaterThan(0)\r\n  const dispatch = useAppDispatch()\r\n\r\n  const lpContract = useERC20(lpAddress)\r\n\r\n  const { onApprove } = useApproveFarm(lpContract)\r\n\r\n  const handleApprove = useCallback(async () => {\r\n    try {\r\n      setRequestedApproval(true)\r\n      await onApprove()\r\n      dispatch(fetchFarmUserDataAsync({ account, pids: [pid] }))\r\n      setRequestedApproval(false)\r\n    } catch (e) {\r\n      console.error(e)\r\n    }\r\n  }, [onApprove, dispatch, account, pid])\r\n\r\n  const renderApprovalOrStakeButton = () => {\r\n    return isApproved ? (\r\n      <StakeAction\r\n        stakedBalance={stakedBalance}\r\n        tokenBalance={tokenBalance}\r\n        tokenName={farm.lpSymbol}\r\n        pid={pid}\r\n        addLiquidityUrl={addLiquidityUrl}\r\n      />\r\n    ) : (\r\n      <Button mt=\"8px\" width=\"100%\" disabled={requestedApproval} onClick={handleApprove}>\r\n        {t('Approve Contract')}\r\n      </Button>\r\n    )\r\n  }\r\n\r\n  return (\r\n    <Action>\r\n      <Flex>\r\n        <Text bold textTransform=\"uppercase\" color=\"secondary\" fontSize=\"12px\" pr=\"4px\">\r\n          PCN\r\n        </Text>\r\n        <Text bold textTransform=\"uppercase\" color=\"textSubtle\" fontSize=\"12px\">\r\n          {t('Earned')}\r\n        </Text>\r\n      </Flex>\r\n      <HarvestAction earnings={earnings} pid={pid} />\r\n      <Flex>\r\n        <Text bold textTransform=\"uppercase\" color=\"secondary\" fontSize=\"12px\" pr=\"4px\">\r\n          {farm.lpSymbol}\r\n        </Text>\r\n        <Text bold textTransform=\"uppercase\" color=\"textSubtle\" fontSize=\"12px\">\r\n          {t('Staked')}\r\n        </Text>\r\n      </Flex>\r\n      {!account ? <UnlockButton mt=\"8px\" width=\"100%\" /> : renderApprovalOrStakeButton()}\r\n    </Action>\r\n  )\r\n}\r\n\r\nexport default CardActions\r\n","import React from 'react'\r\nimport BigNumber from 'bignumber.js'\r\nimport { IconButton, useModal, CalculateIcon } from '@pancakeswap/uikit'\r\nimport ApyCalculatorModal from 'components/ApyCalculatorModal'\r\nimport { useTranslation } from 'contexts/Localization'\r\n\r\nexport interface ApyButtonProps {\r\n  lpLabel?: string\r\n  cakePrice?: BigNumber\r\n  apr?: number\r\n  displayApr?: string\r\n  addLiquidityUrl?: string\r\n}\r\n\r\nconst ApyButton: React.FC<ApyButtonProps> = ({ lpLabel, cakePrice, apr, displayApr, addLiquidityUrl }) => {\r\n  const { t } = useTranslation()\r\n  const [onPresentApyModal] = useModal(\r\n    <ApyCalculatorModal\r\n      linkLabel={t('Get %symbol%', { symbol: lpLabel })}\r\n      tokenPrice={cakePrice.toNumber()}\r\n      apr={apr}\r\n      displayApr={displayApr}\r\n      linkHref={addLiquidityUrl}\r\n      isFarm\r\n    />,\r\n  )\r\n\r\n  const handleClickButton = (event): void => {\r\n    event.stopPropagation()\r\n    onPresentApyModal()\r\n  }\r\n\r\n  return (\r\n    <IconButton onClick={handleClickButton} variant=\"text\" scale=\"sm\" ml=\"4px\">\r\n      <CalculateIcon width=\"18px\" />\r\n    </IconButton>\r\n  )\r\n}\r\n\r\nexport default ApyButton\r\n","import React, { useState } from 'react'\r\nimport BigNumber from 'bignumber.js'\r\nimport styled, { keyframes } from 'styled-components'\r\nimport { Flex, Text, Skeleton } from '@pancakeswap/uikit'\r\nimport { Farm } from 'state/types'\r\nimport { getBscScanLink } from 'utils'\r\nimport { useTranslation } from 'contexts/Localization'\r\nimport ExpandableSectionButton from 'components/ExpandableSectionButton'\r\nimport { BASE_ADD_LIQUIDITY_URL } from 'config'\r\nimport { getAddress } from 'utils/addressHelpers'\r\nimport getLiquidityUrlPathParts from 'utils/getLiquidityUrlPathParts'\r\nimport DetailsSection from './DetailsSection'\r\nimport CardHeading from './CardHeading'\r\nimport CardActionsContainer from './CardActionsContainer'\r\nimport ApyButton from './ApyButton'\r\n\r\nexport interface FarmWithStakedValue extends Farm {\r\n  apr?: number\r\n  lpRewardsApr?: number\r\n  liquidity?: BigNumber\r\n}\r\n\r\nconst AccentGradient = keyframes`  \r\n  0% {\r\n    background-position: 50% 0%;\r\n  }\r\n  50% {\r\n    background-position: 50% 100%;\r\n  }\r\n  100% {\r\n    background-position: 50% 0%;\r\n  }\r\n`\r\n\r\nconst StyledCardAccent = styled.div`\r\n  background: ${({ theme }) => `linear-gradient(180deg, ${theme.colors.primaryBright}, ${theme.colors.secondary})`};\r\n  background-size: 400% 400%;\r\n  animation: ${AccentGradient} 2s linear infinite;\r\n  position: absolute;\r\n  top: -1px;\r\n  right: -1px;\r\n  bottom: -3px;\r\n  left: -1px;\r\n  z-index: -1;\r\n`\r\n\r\nconst FCard = styled.div<{ isPromotedFarm: boolean }>`\r\n  align-self: baseline;\r\n  background: ${(props) => props.theme.card.background};\r\n  box-shadow: 0px 1px 4px rgba(25, 19, 38, 0.15);\r\n  display: flex;\r\n  flex-direction: column;\r\n  justify-content: space-around;\r\n  padding: 24px;\r\n  position: relative;\r\n  text-align: center;\r\n`\r\n\r\nconst Divider = styled.div`\r\n  background-color: ${({ theme }) => theme.colors.cardBorder};\r\n  height: 1px;\r\n  margin: 28px auto;\r\n  width: 100%;\r\n`\r\n\r\nconst ExpandingWrapper = styled.div<{ expanded: boolean }>`\r\n  height: ${(props) => (props.expanded ? '100%' : '0px')};\r\n  overflow: hidden;\r\n`\r\n\r\ninterface FarmCardProps {\r\n  farm: FarmWithStakedValue\r\n  displayApr: string\r\n  removed: boolean\r\n  cakePrice?: BigNumber\r\n  account?: string\r\n}\r\n\r\nconst FarmCard: React.FC<FarmCardProps> = ({ farm, displayApr, removed, cakePrice, account }) => {\r\n  const { t } = useTranslation()\r\n\r\n  const [showExpandableSection, setShowExpandableSection] = useState(false)\r\n\r\n  const totalValueFormatted =\r\n    farm.liquidity && farm.liquidity.gt(0)\r\n      ? `$${farm.liquidity.toNumber().toLocaleString(undefined, { maximumFractionDigits: 0 })}`\r\n      : ''\r\n\r\n  const lpLabel = farm.lpSymbol && farm.lpSymbol.toUpperCase().replace('PANCAKE', '')\r\n  const earnLabel = farm.dual ? farm.dual.earnLabel : t('PCN + Fees')\r\n\r\n  const liquidityUrlPathParts = getLiquidityUrlPathParts({\r\n    quoteTokenAddress: farm.quoteToken.address,\r\n    tokenAddress: farm.token.address,\r\n  })\r\n  const addLiquidityUrl = `${BASE_ADD_LIQUIDITY_URL}/${liquidityUrlPathParts}`\r\n  const lpAddress = getAddress(farm.lpAddresses)\r\n  const isPromotedFarm = farm.token.symbol === 'PCN'\r\n\r\n  return (\r\n    <FCard isPromotedFarm={isPromotedFarm}>\r\n      {isPromotedFarm && <StyledCardAccent />}\r\n      <CardHeading\r\n        lpLabel={lpLabel}\r\n        multiplier={farm.multiplier}\r\n        isCommunityFarm={farm.isCommunity}\r\n        token={farm.token}\r\n        quoteToken={farm.quoteToken}\r\n      />\r\n      {!removed && (\r\n        <Flex justifyContent=\"space-between\" alignItems=\"center\">\r\n          <Text>{t('APR')}:</Text>\r\n          <Text bold style={{ display: 'flex', alignItems: 'center' }}>\r\n            {farm.apr ? (\r\n              <>\r\n                <ApyButton\r\n                  lpLabel={lpLabel}\r\n                  addLiquidityUrl={addLiquidityUrl}\r\n                  cakePrice={cakePrice}\r\n                  apr={farm.apr}\r\n                  displayApr={displayApr}\r\n                />\r\n                {displayApr}%\r\n              </>\r\n            ) : (\r\n              <Skeleton height={24} width={80} />\r\n            )}\r\n          </Text>\r\n        </Flex>\r\n      )}\r\n      <Flex justifyContent=\"space-between\">\r\n        <Text>{t('Earn')}:</Text>\r\n        <Text bold>{earnLabel}</Text>\r\n      </Flex>\r\n      <CardActionsContainer farm={farm} account={account} addLiquidityUrl={addLiquidityUrl} />\r\n      <Divider />\r\n      <ExpandableSectionButton\r\n        onClick={() => setShowExpandableSection(!showExpandableSection)}\r\n        expanded={showExpandableSection}\r\n      />\r\n      <ExpandingWrapper expanded={showExpandableSection}>\r\n        <DetailsSection\r\n          removed={removed}\r\n          bscScanAddress={getBscScanLink(lpAddress, 'address')}\r\n          infoAddress={`${window.location.origin}/pool/${lpAddress}`}\r\n          totalValueFormatted={totalValueFormatted}\r\n          lpLabel={lpLabel}\r\n          addLiquidityUrl={addLiquidityUrl}\r\n        />\r\n      </ExpandingWrapper>\r\n    </FCard>\r\n  )\r\n}\r\n\r\nexport default FarmCard\r\n","import React from 'react'\r\nimport styled from 'styled-components'\r\nimport ApyButton from 'views/Farms/components/FarmCard/ApyButton'\r\nimport { Address } from 'config/constants/types'\r\nimport BigNumber from 'bignumber.js'\r\nimport { BASE_ADD_LIQUIDITY_URL } from 'config'\r\nimport getLiquidityUrlPathParts from 'utils/getLiquidityUrlPathParts'\r\nimport { Skeleton } from '@pancakeswap/uikit'\r\n\r\nexport interface AprProps {\r\n  value: string\r\n  multiplier: string\r\n  lpLabel: string\r\n  tokenAddress?: Address\r\n  quoteTokenAddress?: Address\r\n  cakePrice: BigNumber\r\n  originalValue: number\r\n  hideButton?: boolean\r\n}\r\n\r\nconst Container = styled.div`\r\n  display: flex;\r\n  align-items: center;\r\n  color: ${({ theme }) => theme.colors.text};\r\n\r\n  button {\r\n    width: 20px;\r\n    height: 20px;\r\n\r\n    svg {\r\n      path {\r\n        fill: ${({ theme }) => theme.colors.textSubtle};\r\n      }\r\n    }\r\n  }\r\n`\r\n\r\nconst AprWrapper = styled.div`\r\n  min-width: 60px;\r\n  text-align: left;\r\n`\r\n\r\nconst Apr: React.FC<AprProps> = ({\r\n  value,\r\n  lpLabel,\r\n  tokenAddress,\r\n  quoteTokenAddress,\r\n  cakePrice,\r\n  originalValue,\r\n  hideButton = false,\r\n}) => {\r\n  const liquidityUrlPathParts = getLiquidityUrlPathParts({ quoteTokenAddress, tokenAddress })\r\n  const addLiquidityUrl = `${BASE_ADD_LIQUIDITY_URL}/${liquidityUrlPathParts}`\r\n\r\n  return originalValue !== 0 ? (\r\n    <Container>\r\n      {originalValue ? (\r\n        <>\r\n          <AprWrapper>{value}%</AprWrapper>\r\n          {!hideButton && (\r\n            <ApyButton\r\n              lpLabel={lpLabel}\r\n              cakePrice={cakePrice}\r\n              apr={originalValue}\r\n              displayApr={value}\r\n              addLiquidityUrl={addLiquidityUrl}\r\n            />\r\n          )}\r\n        </>\r\n      ) : (\r\n        <AprWrapper>\r\n          <Skeleton width={60} />\r\n        </AprWrapper>\r\n      )}\r\n    </Container>\r\n  ) : (\r\n    <Container>\r\n      <AprWrapper>{originalValue}%</AprWrapper>\r\n    </Container>\r\n  )\r\n}\r\n\r\nexport default Apr\r\n","import React from 'react'\r\nimport styled from 'styled-components'\r\nimport { useFarmUser } from 'state/hooks'\r\nimport { useTranslation } from 'contexts/Localization'\r\nimport { Text } from '@pancakeswap/uikit'\r\nimport { getBalanceNumber } from 'utils/formatBalance'\r\nimport { Token } from 'config/constants/types'\r\nimport { TokenPairImage } from 'components/TokenImage'\r\n\r\nexport interface FarmProps {\r\n  label: string\r\n  pid: number\r\n  token: Token\r\n  quoteToken: Token\r\n}\r\n\r\nconst Container = styled.div`\r\n  padding-left: 16px;\r\n  display: flex;\r\n  align-items: center;\r\n\r\n  ${({ theme }) => theme.mediaQueries.sm} {\r\n    padding-left: 32px;\r\n  }\r\n`\r\n\r\nconst TokenWrapper = styled.div`\r\n  padding-right: 8px;\r\n  width: 24px;\r\n\r\n  ${({ theme }) => theme.mediaQueries.sm} {\r\n    width: 40px;\r\n  }\r\n`\r\n\r\nconst Farm: React.FunctionComponent<FarmProps> = ({ token, quoteToken, label, pid }) => {\r\n  const { stakedBalance } = useFarmUser(pid)\r\n  const { t } = useTranslation()\r\n  const rawStakedBalance = getBalanceNumber(stakedBalance)\r\n\r\n  const handleRenderFarming = (): JSX.Element => {\r\n    if (rawStakedBalance) {\r\n      return (\r\n        <Text color=\"secondary\" fontSize=\"12px\" bold textTransform=\"uppercase\">\r\n          {t('Farming')}\r\n        </Text>\r\n      )\r\n    }\r\n\r\n    return null\r\n  }\r\n\r\n  return (\r\n    <Container>\r\n      <TokenWrapper>\r\n        <TokenPairImage variant=\"inverted\" primaryToken={token} secondaryToken={quoteToken} width={40} height={40} />\r\n      </TokenWrapper>\r\n      <div>\r\n        {handleRenderFarming()}\r\n        <Text bold>{label}</Text>\r\n      </div>\r\n    </Container>\r\n  )\r\n}\r\n\r\nexport default Farm\r\n","import React from 'react'\r\nimport styled from 'styled-components'\r\nimport { Skeleton } from '@pancakeswap/uikit'\r\n\r\nexport interface EarnedProps {\r\n  earnings: number\r\n  pid: number\r\n}\r\n\r\ninterface EarnedPropsWithLoading extends EarnedProps {\r\n  userDataReady: boolean\r\n}\r\n\r\nconst Amount = styled.span<{ earned: number }>`\r\n  color: ${({ earned, theme }) => (earned ? theme.colors.text : theme.colors.textDisabled)};\r\n  display: flex;\r\n  align-items: center;\r\n`\r\n\r\nconst Earned: React.FunctionComponent<EarnedPropsWithLoading> = ({ earnings, userDataReady }) => {\r\n  if (userDataReady) {\r\n    return <Amount earned={earnings}>{earnings.toLocaleString()}</Amount>\r\n  }\r\n  return (\r\n    <Amount earned={0}>\r\n      <Skeleton width={60} />\r\n    </Amount>\r\n  )\r\n}\r\n\r\nexport default Earned\r\n","import React from 'react'\r\nimport styled from 'styled-components'\r\nimport { ChevronDownIcon, useMatchBreakpoints } from '@pancakeswap/uikit'\r\nimport { useTranslation } from 'contexts/Localization'\r\n\r\ninterface DetailsProps {\r\n  actionPanelToggled: boolean\r\n}\r\n\r\nconst Container = styled.div`\r\n  display: flex;\r\n  width: 100%;\r\n  justify-content: flex-end;\r\n  padding-right: 8px;\r\n  color: #CF71E4;\r\n\r\n  ${({ theme }) => theme.mediaQueries.sm} {\r\n    padding-right: 0px;\r\n  }\r\n`\r\n\r\nconst ArrowIcon = styled(ChevronDownIcon) <{ toggled: boolean }>`\r\n  transform: ${({ toggled }) => (toggled ? 'rotate(180deg)' : 'rotate(0)')};\r\n  height: 20px;\r\n  color: #CF71E4;\r\n`\r\n\r\nconst Details: React.FC<DetailsProps> = ({ actionPanelToggled }) => {\r\n  const { t } = useTranslation()\r\n  const { isXl } = useMatchBreakpoints()\r\n  const isMobile = !isXl\r\n\r\n  return (\r\n    <Container>\r\n      {!isMobile && t('Details')}\r\n    </Container>\r\n  )\r\n}\r\n\r\nexport default Details\r\n","import React from 'react'\r\nimport styled from 'styled-components'\r\nimport { HelpIcon, Skeleton, useTooltip } from '@pancakeswap/uikit'\r\nimport { useTranslation } from 'contexts/Localization'\r\n\r\nconst ReferenceElement = styled.div`\r\n  display: inline-block;\r\n`\r\n\r\nexport interface MultiplierProps {\r\n  multiplier: string\r\n}\r\n\r\nconst MultiplierWrapper = styled.div`\r\n  color: ${({ theme }) => theme.colors.text};\r\n  width: 36px;\r\n  text-align: right;\r\n  margin-right: 14px;\r\n\r\n  ${({ theme }) => theme.mediaQueries.lg} {\r\n    text-align: left;\r\n    margin-right: 0;\r\n  }\r\n`\r\n\r\nconst Container = styled.div`\r\n  display: flex;\r\n  align-items: center;\r\n`\r\n\r\nconst Multiplier: React.FunctionComponent<MultiplierProps> = ({ multiplier }) => {\r\n  const displayMultiplier = multiplier ? multiplier.toLowerCase() : <Skeleton width={30} />\r\n  const { t } = useTranslation()\r\n  const tooltipContent = (\r\n    <>\r\n      {t('The multiplier represents the amount of CAKE rewards each farm gets.')}\r\n      <br />\r\n      <br />\r\n      {t('For example, if a 1x farm was getting 1 CAKE per block, a 40x farm would be getting 40 CAKE per block.')}\r\n    </>\r\n  )\r\n  const { targetRef, tooltip, tooltipVisible } = useTooltip(tooltipContent, {\r\n    placement: 'top-end',\r\n    tooltipOffset: [20, 10],\r\n  })\r\n\r\n  return (\r\n    <Container>\r\n      <MultiplierWrapper>{displayMultiplier}</MultiplierWrapper>\r\n      <ReferenceElement ref={targetRef}>\r\n        <HelpIcon color=\"textSubtle\" />\r\n      </ReferenceElement>\r\n      {tooltipVisible && tooltip}\r\n    </Container>\r\n  )\r\n}\r\n\r\nexport default Multiplier\r\n","import React from 'react'\r\nimport styled from 'styled-components'\r\nimport { HelpIcon, Text, Skeleton, useTooltip } from '@pancakeswap/uikit'\r\nimport { useTranslation } from 'contexts/Localization'\r\nimport BigNumber from 'bignumber.js'\r\n\r\nconst ReferenceElement = styled.div`\r\n  display: inline-block;\r\n`\r\n\r\nexport interface LiquidityProps {\r\n  liquidity: BigNumber\r\n}\r\n\r\nconst LiquidityWrapper = styled.div`\r\n  min-width: 110px;\r\n  font-weight: 600;\r\n  text-align: right;\r\n  margin-right: 14px;\r\n\r\n  ${({ theme }) => theme.mediaQueries.lg} {\r\n    text-align: left;\r\n    margin-right: 0;\r\n  }\r\n`\r\n\r\nconst Container = styled.div`\r\n  display: flex;\r\n  align-items: center;\r\n`\r\n\r\nconst Liquidity: React.FunctionComponent<LiquidityProps> = ({ liquidity }) => {\r\n  const displayLiquidity =\r\n    liquidity && liquidity.gt(0) ? (\r\n      `$${Number(liquidity).toLocaleString(undefined, { maximumFractionDigits: 0 })}`\r\n    ) : (\r\n      <Skeleton width={60} />\r\n    )\r\n  const { t } = useTranslation()\r\n  const { targetRef, tooltip, tooltipVisible } = useTooltip(\r\n    t('Total value of the funds in this farm’s liquidity pool'),\r\n    { placement: 'top-end', tooltipOffset: [20, 10] },\r\n  )\r\n\r\n  return (\r\n    <Container>\r\n      <LiquidityWrapper>\r\n        <Text>{displayLiquidity}</Text>\r\n      </LiquidityWrapper>\r\n      <ReferenceElement ref={targetRef}>\r\n        <HelpIcon color=\"textSubtle\" />\r\n      </ReferenceElement>\r\n      {tooltipVisible && tooltip}\r\n    </Container>\r\n  )\r\n}\r\n\r\nexport default Liquidity\r\n","import styled from 'styled-components'\r\n\r\nexport const ActionContainer = styled.div`\r\n  padding: 16px;\r\n  border: 2px solid ${({ theme }) => theme.colors.input};\r\n  border-radius: 16px;\r\n  flex-grow: 1;\r\n  flex-basis: 0;\r\n  margin-bottom: 16px;\r\n\r\n  ${({ theme }) => theme.mediaQueries.sm} {\r\n    margin-left: 12px;\r\n    margin-right: 12px;\r\n    margin-bottom: 0;\r\n    max-height: 100px;\r\n  }\r\n\r\n  ${({ theme }) => theme.mediaQueries.xl} {\r\n    margin-left: 48px;\r\n    margin-right: 0;\r\n    margin-bottom: 0;\r\n    max-height: 100px;\r\n  }\r\n`\r\n\r\nexport const ActionTitles = styled.div`\r\n  display: flex;\r\n`\r\n\r\nexport const ActionContent = styled.div`\r\n  display: flex;\r\n  justify-content: space-between;\r\n  align-items: center;\r\n`\r\nexport const Earned = styled.div`\r\n  font-weight: 600;\r\n  font-size: 20px;\r\n  color: ${({ theme }) => theme.colors.text};\r\n`\r\n","import React, { useState } from 'react'\r\nimport { Button, Skeleton, Text } from '@pancakeswap/uikit'\r\nimport BigNumber from 'bignumber.js'\r\nimport { useWeb3React } from '@web3-react/core'\r\nimport { FarmWithStakedValue } from 'views/Farms/components/FarmCard/FarmCard'\r\nimport Balance from 'components/Balance'\r\nimport { BIG_ZERO } from 'utils/bigNumber'\r\nimport { getBalanceAmount } from 'utils/formatBalance'\r\nimport { useAppDispatch } from 'state'\r\nimport { fetchFarmUserDataAsync } from 'state/farms'\r\nimport { usePriceCakeBusd } from 'state/hooks'\r\nimport useToast from 'hooks/useToast'\r\nimport { useTranslation } from 'contexts/Localization'\r\nimport useHarvestFarm from '../../../hooks/useHarvestFarm'\r\n\r\nimport { ActionContainer, ActionTitles, ActionContent, Earned } from './styles'\r\n\r\ninterface HarvestActionProps extends FarmWithStakedValue {\r\n  userDataReady: boolean\r\n}\r\n\r\nconst HarvestAction: React.FunctionComponent<HarvestActionProps> = ({ pid, userData, userDataReady }) => {\r\n  const { toastSuccess, toastError } = useToast()\r\n  const earningsBigNumber = new BigNumber(userData.earnings)\r\n  const cakePrice = usePriceCakeBusd()\r\n  let earnings = BIG_ZERO\r\n  let earningsBusd = 0\r\n  let displayBalance = userDataReady ? earnings.toLocaleString() : <Skeleton width={60} />\r\n\r\n  // If user didn't connect wallet default balance will be 0\r\n  if (!earningsBigNumber.isZero()) {\r\n    earnings = getBalanceAmount(earningsBigNumber)\r\n    earningsBusd = earnings.multipliedBy(cakePrice).toNumber()\r\n    displayBalance = earnings.toFixed(3, BigNumber.ROUND_DOWN)\r\n  }\r\n\r\n  const [pendingTx, setPendingTx] = useState(false)\r\n  const { onReward } = useHarvestFarm(pid)\r\n  const { t } = useTranslation()\r\n  const dispatch = useAppDispatch()\r\n  const { account } = useWeb3React()\r\n\r\n  return (\r\n    <ActionContainer>\r\n      <ActionTitles>\r\n        <Text bold textTransform=\"uppercase\" color=\"secondary\" fontSize=\"12px\" pr=\"4px\">\r\n          PCN\r\n        </Text>\r\n        <Text bold textTransform=\"uppercase\" color=\"textSubtle\" fontSize=\"12px\">\r\n          {t('Earned')}\r\n        </Text>\r\n      </ActionTitles>\r\n      <ActionContent>\r\n        <div>\r\n          <Earned>{displayBalance}</Earned>\r\n          {earningsBusd > 0 && (\r\n            <Balance fontSize=\"12px\" color=\"textSubtle\" decimals={2} value={earningsBusd} unit=\" USD\" prefix=\"~\" />\r\n          )}\r\n        </div>\r\n        <Button\r\n          disabled={earnings.eq(0) || pendingTx || !userDataReady}\r\n          onClick={async () => {\r\n            setPendingTx(true)\r\n            try {\r\n              await onReward()\r\n              toastSuccess(\r\n                `${t('Harvested')}!`,\r\n                t('Your %symbol% earnings have been sent to your wallet!', { symbol: 'PCN' }),\r\n              )\r\n            } catch (e) {\r\n              toastError(\r\n                t('Error'),\r\n                t('Please try again. Confirm the transaction and make sure you are paying enough gas!'),\r\n              )\r\n              console.error(e)\r\n            } finally {\r\n              setPendingTx(false)\r\n            }\r\n            dispatch(fetchFarmUserDataAsync({ account, pids: [pid] }))\r\n          }}\r\n          ml=\"4px\"\r\n        >\r\n          {t('Harvest')}\r\n        </Button>\r\n      </ActionContent>\r\n    </ActionContainer>\r\n  )\r\n}\r\n\r\nexport default HarvestAction\r\n","import React, { useState, useCallback } from 'react'\r\nimport styled from 'styled-components'\r\nimport { Button, useModal, IconButton, AddIcon, MinusIcon, Skeleton, Text } from '@pancakeswap/uikit'\r\nimport { useLocation } from 'react-router-dom'\r\nimport { BigNumber } from 'bignumber.js'\r\nimport UnlockButton from 'components/UnlockButton'\r\nimport Balance from 'components/Balance'\r\nimport { useWeb3React } from '@web3-react/core'\r\nimport { useFarmUser, useLpTokenPrice } from 'state/hooks'\r\nimport { fetchFarmUserDataAsync } from 'state/farms'\r\nimport { FarmWithStakedValue } from 'views/Farms/components/FarmCard/FarmCard'\r\nimport { useTranslation } from 'contexts/Localization'\r\nimport { useERC20 } from 'hooks/useContract'\r\nimport { BASE_ADD_LIQUIDITY_URL } from 'config'\r\nimport { useAppDispatch } from 'state'\r\nimport { getAddress } from 'utils/addressHelpers'\r\nimport getLiquidityUrlPathParts from 'utils/getLiquidityUrlPathParts'\r\nimport { getBalanceAmount, getBalanceNumber, getFullDisplayBalance } from 'utils/formatBalance'\r\nimport useUnstakeFarms from '../../../hooks/useUnstakeFarms'\r\nimport DepositModal from '../../DepositModal'\r\nimport WithdrawModal from '../../WithdrawModal'\r\nimport useStakeFarms from '../../../hooks/useStakeFarms'\r\nimport useApproveFarm from '../../../hooks/useApproveFarm'\r\nimport { ActionContainer, ActionTitles, ActionContent, Earned } from './styles'\r\n\r\nconst IconButtonWrapper = styled.div`\r\n  display: flex;\r\n`\r\n\r\ninterface StackedActionProps extends FarmWithStakedValue {\r\n  userDataReady: boolean\r\n}\r\n\r\nconst Staked: React.FunctionComponent<StackedActionProps> = ({\r\n  pid,\r\n  lpSymbol,\r\n  lpAddresses,\r\n  quoteToken,\r\n  token,\r\n  userDataReady,\r\n}) => {\r\n  const { t } = useTranslation()\r\n  const { account } = useWeb3React()\r\n  const [requestedApproval, setRequestedApproval] = useState(false)\r\n  const { allowance, tokenBalance, stakedBalance } = useFarmUser(pid)\r\n  const { onStake } = useStakeFarms(pid)\r\n  const { onUnstake } = useUnstakeFarms(pid)\r\n  const location = useLocation()\r\n  const lpPrice = useLpTokenPrice(lpSymbol)\r\n\r\n  const isApproved = account && allowance && allowance.isGreaterThan(0)\r\n\r\n  const lpAddress = getAddress(lpAddresses)\r\n  const liquidityUrlPathParts = getLiquidityUrlPathParts({\r\n    quoteTokenAddress: quoteToken.address,\r\n    tokenAddress: token.address,\r\n  })\r\n  const addLiquidityUrl = `${BASE_ADD_LIQUIDITY_URL}/${liquidityUrlPathParts}`\r\n\r\n  const handleStake = async (amount: string) => {\r\n    await onStake(amount)\r\n    dispatch(fetchFarmUserDataAsync({ account, pids: [pid] }))\r\n  }\r\n\r\n  const handleUnstake = async (amount: string) => {\r\n    await onUnstake(amount)\r\n    dispatch(fetchFarmUserDataAsync({ account, pids: [pid] }))\r\n  }\r\n\r\n  const displayBalance = useCallback(() => {\r\n    const stakedBalanceBigNumber = getBalanceAmount(stakedBalance)\r\n    if (stakedBalanceBigNumber.gt(0) && stakedBalanceBigNumber.lt(0.0001)) {\r\n      return getFullDisplayBalance(stakedBalance).toLocaleString()\r\n    }\r\n    return stakedBalanceBigNumber.toFixed(3, BigNumber.ROUND_DOWN)\r\n  }, [stakedBalance])\r\n\r\n  const [onPresentDeposit] = useModal(\r\n    <DepositModal max={tokenBalance} onConfirm={handleStake} tokenName={lpSymbol} addLiquidityUrl={addLiquidityUrl} />,\r\n  )\r\n  const [onPresentWithdraw] = useModal(\r\n    <WithdrawModal max={stakedBalance} onConfirm={handleUnstake} tokenName={lpSymbol} />,\r\n  )\r\n  const lpContract = useERC20(lpAddress)\r\n  const dispatch = useAppDispatch()\r\n  const { onApprove } = useApproveFarm(lpContract)\r\n\r\n  const handleApprove = useCallback(async () => {\r\n    try {\r\n      setRequestedApproval(true)\r\n      await onApprove()\r\n      dispatch(fetchFarmUserDataAsync({ account, pids: [pid] }))\r\n\r\n      setRequestedApproval(false)\r\n    } catch (e) {\r\n      console.error(e)\r\n    }\r\n  }, [onApprove, dispatch, account, pid])\r\n\r\n  if (!account) {\r\n    return (\r\n      <ActionContainer>\r\n        <ActionTitles>\r\n          <Text bold textTransform=\"uppercase\" color=\"textSubtle\" fontSize=\"12px\">\r\n            {t('Start Farming')}\r\n          </Text>\r\n        </ActionTitles>\r\n        <ActionContent>\r\n          <UnlockButton width=\"100%\" />\r\n        </ActionContent>\r\n      </ActionContainer>\r\n    )\r\n  }\r\n\r\n  if (isApproved) {\r\n    if (stakedBalance.gt(0)) {\r\n      return (\r\n        <ActionContainer>\r\n          <ActionTitles>\r\n            <Text bold textTransform=\"uppercase\" color=\"secondary\" fontSize=\"12px\" pr=\"4px\">\r\n              {lpSymbol}\r\n            </Text>\r\n            <Text bold textTransform=\"uppercase\" color=\"textSubtle\" fontSize=\"12px\">\r\n              {t('Staked')}\r\n            </Text>\r\n          </ActionTitles>\r\n          <ActionContent>\r\n            <div>\r\n              <Earned>{displayBalance()}</Earned>\r\n              {stakedBalance.gt(0) && lpPrice.gt(0) && (\r\n                <Balance\r\n                  fontSize=\"12px\"\r\n                  color=\"textSubtle\"\r\n                  decimals={2}\r\n                  value={getBalanceNumber(lpPrice.times(stakedBalance))}\r\n                  unit=\" USD\"\r\n                  prefix=\"~\"\r\n                />\r\n              )}\r\n            </div>\r\n            <IconButtonWrapper>\r\n              <IconButton variant=\"secondary\" onClick={onPresentWithdraw} mr=\"6px\">\r\n                <MinusIcon color=\"primary\" width=\"14px\" />\r\n              </IconButton>\r\n              <IconButton\r\n                variant=\"secondary\"\r\n                onClick={onPresentDeposit}\r\n                disabled={['history', 'archived'].some((item) => location.pathname.includes(item))}\r\n              >\r\n                <AddIcon color=\"primary\" width=\"14px\" />\r\n              </IconButton>\r\n            </IconButtonWrapper>\r\n          </ActionContent>\r\n        </ActionContainer>\r\n      )\r\n    }\r\n\r\n    return (\r\n      <ActionContainer>\r\n        <ActionTitles>\r\n          <Text bold textTransform=\"uppercase\" color=\"textSubtle\" fontSize=\"12px\" pr=\"4px\">\r\n            {t('Stake').toUpperCase()}\r\n          </Text>\r\n          <Text bold textTransform=\"uppercase\" color=\"secondary\" fontSize=\"12px\">\r\n            {lpSymbol}\r\n          </Text>\r\n        </ActionTitles>\r\n        <ActionContent>\r\n          <Button\r\n            width=\"100%\"\r\n            onClick={onPresentDeposit}\r\n            variant=\"secondary\"\r\n            disabled={['history', 'archived'].some((item) => location.pathname.includes(item))}\r\n          >\r\n            {t('Stake LP')}\r\n          </Button>\r\n        </ActionContent>\r\n      </ActionContainer>\r\n    )\r\n  }\r\n\r\n  if (!userDataReady) {\r\n    return (\r\n      <ActionContainer>\r\n        <ActionTitles>\r\n          <Text bold textTransform=\"uppercase\" color=\"textSubtle\" fontSize=\"12px\">\r\n            {t('Start Farming')}\r\n          </Text>\r\n        </ActionTitles>\r\n        <ActionContent>\r\n          <Skeleton width={180} marginBottom={28} marginTop={14} />\r\n        </ActionContent>\r\n      </ActionContainer>\r\n    )\r\n  }\r\n\r\n  return (\r\n    <ActionContainer>\r\n      <ActionTitles>\r\n        <Text bold textTransform=\"uppercase\" color=\"textSubtle\" fontSize=\"12px\">\r\n          {t('Enable Farm')}\r\n        </Text>\r\n      </ActionTitles>\r\n      <ActionContent>\r\n        <Button width=\"100%\" disabled={requestedApproval} onClick={handleApprove} variant=\"secondary\">\r\n          {t('Enable')}\r\n        </Button>\r\n      </ActionContent>\r\n    </ActionContainer>\r\n  )\r\n}\r\n\r\nexport default Staked\r\n","import React from 'react'\r\nimport styled, { keyframes, css } from 'styled-components'\r\nimport { useTranslation } from 'contexts/Localization'\r\nimport { LinkExternal, Text } from '@pancakeswap/uikit'\r\nimport { FarmWithStakedValue } from 'views/Farms/components/FarmCard/FarmCard'\r\nimport getLiquidityUrlPathParts from 'utils/getLiquidityUrlPathParts'\r\nimport { getAddress } from 'utils/addressHelpers'\r\nimport { getBscScanLink } from 'utils'\r\nimport { CommunityTag, CoreTag, DualTag } from 'components/Tags'\r\n\r\nimport HarvestAction from './HarvestAction'\r\nimport StakedAction from './StakedAction'\r\nimport Apr, { AprProps } from '../Apr'\r\nimport Multiplier, { MultiplierProps } from '../Multiplier'\r\nimport Liquidity, { LiquidityProps } from '../Liquidity'\r\n\r\nexport interface ActionPanelProps {\r\n  apr: AprProps\r\n  multiplier: MultiplierProps\r\n  liquidity: LiquidityProps\r\n  details: FarmWithStakedValue\r\n  userDataReady: boolean\r\n  expanded: boolean\r\n}\r\n\r\nconst expandAnimation = keyframes`\r\n  from {\r\n    max-height: 0px;\r\n  }\r\n  to {\r\n    max-height: 500px;\r\n  }\r\n`\r\n\r\nconst collapseAnimation = keyframes`\r\n  from {\r\n    max-height: 500px;\r\n  }\r\n  to {\r\n    max-height: 0px;\r\n  }\r\n`\r\n\r\nconst Container = styled.div<{ expanded }>`\r\n  animation: ${({ expanded }) =>\r\n    expanded\r\n      ? css`\r\n          ${expandAnimation} 300ms linear forwards\r\n        `\r\n      : css`\r\n          ${collapseAnimation} 300ms linear forwards\r\n        `};\r\n  overflow: hidden;\r\n  background: ${({ theme }) => theme.colors.background};\r\n  display: flex;\r\n  width: 100%;\r\n  flex-direction: column-reverse;\r\n  padding: 24px;\r\n\r\n  ${({ theme }) => theme.mediaQueries.lg} {\r\n    flex-direction: row;\r\n    padding: 16px 32px;\r\n  }\r\n`\r\n\r\nconst StyledLinkExternal = styled(LinkExternal)`\r\n  font-weight: 400;\r\n`\r\n\r\nconst StakeContainer = styled.div`\r\n  color: ${({ theme }) => theme.colors.text};\r\n  align-items: center;\r\n  display: flex;\r\n  justify-content: space-between;\r\n\r\n  ${({ theme }) => theme.mediaQueries.sm} {\r\n    justify-content: flex-start;\r\n  }\r\n`\r\n\r\nconst TagsContainer = styled.div`\r\n  display: flex;\r\n  align-items: center;\r\n  margin-top: 25px;\r\n\r\n  ${({ theme }) => theme.mediaQueries.sm} {\r\n    margin-top: 16px;\r\n  }\r\n\r\n  > div {\r\n    height: 24px;\r\n    padding: 0 6px;\r\n    font-size: 14px;\r\n    margin-right: 4px;\r\n\r\n    svg {\r\n      width: 14px;\r\n    }\r\n  }\r\n`\r\n\r\nconst ActionContainer = styled.div`\r\n  display: flex;\r\n  flex-direction: column;\r\n\r\n  ${({ theme }) => theme.mediaQueries.sm} {\r\n    flex-direction: row;\r\n    align-items: center;\r\n    flex-grow: 1;\r\n    flex-basis: 0;\r\n  }\r\n`\r\n\r\nconst InfoContainer = styled.div`\r\n  min-width: 200px;\r\n`\r\n\r\nconst ValueContainer = styled.div`\r\n  display: block;\r\n\r\n  ${({ theme }) => theme.mediaQueries.lg} {\r\n    display: none;\r\n  }\r\n`\r\n\r\nconst ValueWrapper = styled.div`\r\n  display: flex;\r\n  align-items: center;\r\n  justify-content: space-between;\r\n  margin: 4px 0px;\r\n`\r\n\r\nconst ActionPanel: React.FunctionComponent<ActionPanelProps> = ({\r\n  details,\r\n  apr,\r\n  multiplier,\r\n  liquidity,\r\n  userDataReady,\r\n  expanded,\r\n}) => {\r\n  const farm = details\r\n\r\n  const { t } = useTranslation()\r\n  const isActive = farm.multiplier !== '0X'\r\n  const { quoteToken, token, dual } = farm\r\n  const lpLabel = farm.lpSymbol && farm.lpSymbol.toUpperCase().replace('PANCAKE', '')\r\n  const liquidityUrlPathParts = getLiquidityUrlPathParts({\r\n    quoteTokenAddress: quoteToken.address,\r\n    tokenAddress: token.address,\r\n  })\r\n  const lpAddress = getAddress(farm.lpAddresses)\r\n  const bsc = getBscScanLink(lpAddress, 'address')\r\n  const info = `${window.location.origin}/pool/${lpAddress}`\r\n\r\n  return (\r\n    <Container expanded={expanded}>\r\n      <InfoContainer>\r\n        {isActive && (\r\n          <StakeContainer>\r\n            <StyledLinkExternal href={`/add/${liquidityUrlPathParts}`}>\r\n              {t('Get %symbol%', { symbol: lpLabel })}\r\n            </StyledLinkExternal>\r\n          </StakeContainer>\r\n        )}\r\n        <StyledLinkExternal href={bsc}>{t('View Contract')}</StyledLinkExternal>\r\n        <StyledLinkExternal href={info}>{t('See Pair Info')}</StyledLinkExternal>\r\n        <TagsContainer>\r\n          {farm.isCommunity ? <CommunityTag /> : <CoreTag />}\r\n          {dual ? <DualTag /> : null}\r\n        </TagsContainer>\r\n      </InfoContainer>\r\n      <ValueContainer>\r\n        <ValueWrapper>\r\n          <Text>{t('APR')}</Text>\r\n          <Apr {...apr} />\r\n        </ValueWrapper>\r\n        <ValueWrapper>\r\n          <Text>{t('Multiplier')}</Text>\r\n          <Multiplier {...multiplier} />\r\n        </ValueWrapper>\r\n        <ValueWrapper>\r\n          <Text>{t('Liquidity')}</Text>\r\n          <Liquidity {...liquidity} />\r\n        </ValueWrapper>\r\n      </ValueContainer>\r\n      <ActionContainer>\r\n        <HarvestAction {...farm} userDataReady={userDataReady} />\r\n        <StakedAction {...farm} userDataReady={userDataReady} />\r\n      </ActionContainer>\r\n    </Container>\r\n  )\r\n}\r\n\r\nexport default ActionPanel\r\n","import React from 'react'\r\nimport styled from 'styled-components'\r\n\r\nconst Label = styled.div`\r\n  font-size: 12px;\r\n  color: ${({ theme }) => theme.colors.textSubtle};\r\n  text-align: left;\r\n`\r\n\r\nconst ContentContainer = styled.div`\r\n  min-height: 24px;\r\n  display: flex;\r\n  align-items: center;\r\n`\r\n\r\ninterface CellLayoutProps {\r\n  label?: string\r\n}\r\n\r\nconst CellLayout: React.FC<CellLayoutProps> = ({ label = '', children }) => {\r\n  return (\r\n    <div>\r\n      {label && <Label>{label}</Label>}\r\n      <ContentContainer>{children}</ContentContainer>\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default CellLayout\r\n","import React, { useEffect, useState } from 'react'\r\nimport styled from 'styled-components'\r\nimport { FarmWithStakedValue } from 'views/Farms/components/FarmCard/FarmCard'\r\nimport { useMatchBreakpoints } from '@pancakeswap/uikit'\r\nimport { useTranslation } from 'contexts/Localization'\r\nimport useDelayedUnmount from 'hooks/useDelayedUnmount'\r\nimport { useFarmUser } from 'state/hooks'\r\n\r\nimport Apr, { AprProps } from './Apr'\r\nimport Farm, { FarmProps } from './Farm'\r\nimport Earned, { EarnedProps } from './Earned'\r\nimport Details from './Details'\r\nimport Multiplier, { MultiplierProps } from './Multiplier'\r\nimport Liquidity, { LiquidityProps } from './Liquidity'\r\nimport ActionPanel from './Actions/ActionPanel'\r\nimport CellLayout from './CellLayout'\r\nimport { DesktopColumnSchema, MobileColumnSchema } from '../types'\r\n\r\nexport interface RowProps {\r\n  apr: AprProps\r\n  farm: FarmProps\r\n  earned: EarnedProps\r\n  multiplier: MultiplierProps\r\n  liquidity: LiquidityProps\r\n  details: FarmWithStakedValue\r\n}\r\n\r\ninterface RowPropsWithLoading extends RowProps {\r\n  userDataReady: boolean\r\n}\r\n\r\nconst cells = {\r\n  apr: Apr,\r\n  farm: Farm,\r\n  earned: Earned,\r\n  details: Details,\r\n  multiplier: Multiplier,\r\n  liquidity: Liquidity,\r\n}\r\n\r\nconst CellInner = styled.div`\r\n  padding: 24px 0px;\r\n  display: flex;\r\n  width: 100%;\r\n  align-items: center;\r\n  padding-right: 8px;\r\n\r\n  ${({ theme }) => theme.mediaQueries.xl} {\r\n    padding-right: 32px;\r\n  }\r\n`\r\n\r\nconst StyledTr = styled.tr`\r\n  cursor: pointer;\r\n  border-bottom: 2px solid ${({ theme }) => theme.colors.cardBorder};\r\n`\r\n\r\nconst EarnedMobileCell = styled.td`\r\n  padding: 16px 0 24px 16px;\r\n`\r\n\r\nconst AprMobileCell = styled.td`\r\n  padding-top: 16px;\r\n  padding-bottom: 24px;\r\n`\r\n\r\nconst FarmMobileCell = styled.td`\r\n  padding-top: 24px;\r\n`\r\n\r\nconst Row: React.FunctionComponent<RowPropsWithLoading> = (props) => {\r\n  const { details, userDataReady } = props\r\n  const hasStakedAmount = !!useFarmUser(details.pid).stakedBalance.toNumber()\r\n  const [actionPanelExpanded, setActionPanelExpanded] = useState(hasStakedAmount)\r\n  const shouldRenderChild = useDelayedUnmount(actionPanelExpanded, 300)\r\n  const { t } = useTranslation()\r\n\r\n  const toggleActionPanel = () => {\r\n    setActionPanelExpanded(!actionPanelExpanded)\r\n  }\r\n\r\n  useEffect(() => {\r\n    setActionPanelExpanded(hasStakedAmount)\r\n  }, [hasStakedAmount])\r\n\r\n  const { isXl, isXs } = useMatchBreakpoints()\r\n\r\n  const isMobile = !isXl\r\n  const tableSchema = isMobile ? MobileColumnSchema : DesktopColumnSchema\r\n  const columnNames = tableSchema.map((column) => column.name)\r\n\r\n  const handleRenderRow = () => {\r\n    if (!isXs) {\r\n      return (\r\n        <StyledTr onClick={toggleActionPanel}>\r\n          {Object.keys(props).map((key) => {\r\n            const columnIndex = columnNames.indexOf(key)\r\n            if (columnIndex === -1) {\r\n              return null\r\n            }\r\n\r\n            switch (key) {\r\n              case 'details':\r\n                return (\r\n                  <td key={key}>\r\n                    <CellInner>\r\n                      <CellLayout>\r\n                        <Details actionPanelToggled={actionPanelExpanded} />\r\n                      </CellLayout>\r\n                    </CellInner>\r\n                  </td>\r\n                )\r\n              case 'apr':\r\n                return (\r\n                  <td key={key}>\r\n                    <CellInner>\r\n                      <CellLayout label={t('APR')}>\r\n                        <Apr {...props.apr} hideButton={isMobile} />\r\n                      </CellLayout>\r\n                    </CellInner>\r\n                  </td>\r\n                )\r\n              default:\r\n                return (\r\n                  <td key={key}>\r\n                    <CellInner>\r\n                      <CellLayout label={t(tableSchema[columnIndex].label)}>\r\n                        {React.createElement(cells[key], { ...props[key], userDataReady })}\r\n                      </CellLayout>\r\n                    </CellInner>\r\n                  </td>\r\n                )\r\n            }\r\n          })}\r\n        </StyledTr>\r\n      )\r\n    }\r\n\r\n    return (\r\n      <StyledTr onClick={toggleActionPanel}>\r\n        <td>\r\n          <tr>\r\n            <FarmMobileCell>\r\n              <CellLayout>\r\n                <Farm {...props.farm} />\r\n              </CellLayout>\r\n            </FarmMobileCell>\r\n          </tr>\r\n          <tr>\r\n            <EarnedMobileCell>\r\n              <CellLayout label={t('Earned')}>\r\n                <Earned {...props.earned} userDataReady={userDataReady} />\r\n              </CellLayout>\r\n            </EarnedMobileCell>\r\n            <AprMobileCell>\r\n              <CellLayout label={t('APR')}>\r\n                <Apr {...props.apr} hideButton />\r\n              </CellLayout>\r\n            </AprMobileCell>\r\n          </tr>\r\n        </td>\r\n        <td>\r\n          <CellInner>\r\n            <CellLayout>\r\n              <Details actionPanelToggled={actionPanelExpanded} />\r\n            </CellLayout>\r\n          </CellInner>\r\n        </td>\r\n      </StyledTr>\r\n    )\r\n  }\r\n\r\n  return (\r\n    <>\r\n      {handleRenderRow()}\r\n      {shouldRenderChild && (\r\n        <tr>\r\n          <td colSpan={6}>\r\n            <ActionPanel {...props} expanded={actionPanelExpanded} />\r\n          </td>\r\n        </tr>\r\n      )}\r\n    </>\r\n  )\r\n}\r\n\r\nexport default Row\r\n","import React, { useRef } from 'react'\r\nimport styled from 'styled-components'\r\nimport { useTable, Button, ChevronUpIcon, ColumnType } from '@pancakeswap/uikit'\r\nimport { useTranslation } from 'contexts/Localization'\r\n\r\nimport Row, { RowProps } from './Row'\r\n\r\nexport interface ITableProps {\r\n  data: RowProps[]\r\n  columns: ColumnType<RowProps>[]\r\n  userDataReady: boolean\r\n  sortColumn?: string\r\n}\r\n\r\nconst Container = styled.div`\r\n  filter: ${({ theme }) => theme.card.dropShadow};\r\n  width: 100%;\r\n  background: ${({ theme }) => theme.card.background};\r\n  margin: 16px 0px;\r\n  background-color: #181725;\r\n  box-sizing: content-box;\r\n  border-top: 4px solid transparent;\r\n  border-image: linear-gradient(to right, #F6B8B8, #1fc7d4 1 stretch;\r\n  border-image-slice: 1;\r\n`\r\n\r\nconst TableWrapper = styled.div`\r\n  overflow: visible;\r\n\r\n  &::-webkit-scrollbar {\r\n    display: none;\r\n  }\r\n`\r\n\r\nconst StyledTable = styled.table`\r\n  border-collapse: collapse;\r\n  font-size: 14px;\r\n  border-radius: 4px;\r\n  margin-left: auto;\r\n  margin-right: auto;\r\n  width: 100%;\r\n`\r\n\r\nconst TableBody = styled.tbody`\r\n  & tr {\r\n    td {\r\n      font-size: 16px;\r\n      vertical-align: middle;\r\n    }\r\n  }\r\n`\r\n\r\nconst TableContainer = styled.div`\r\n  position: relative;\r\n`\r\n\r\nconst ScrollButtonContainer = styled.div`\r\n  display: flex;\r\n  justify-content: center;\r\n  padding-top: 5px;\r\n  padding-bottom: 5px;\r\n`\r\n\r\nconst FarmTable: React.FC<ITableProps> = (props) => {\r\n  const tableWrapperEl = useRef<HTMLDivElement>(null)\r\n  const { t } = useTranslation()\r\n  const { data, columns, userDataReady } = props\r\n\r\n  const { rows } = useTable(columns, data, { sortable: true, sortColumn: 'farm' })\r\n\r\n  const scrollToTop = (): void => {\r\n    tableWrapperEl.current.scrollIntoView({\r\n      behavior: 'smooth',\r\n    })\r\n  }\r\n\r\n  return (\r\n    <Container>\r\n      <TableContainer>\r\n        <TableWrapper ref={tableWrapperEl}>\r\n          <StyledTable>\r\n            <TableBody>\r\n              {rows.map((row) => {\r\n                return <Row {...row.original} userDataReady={userDataReady} key={`table-row-${row.id}`} />\r\n              })}\r\n            </TableBody>\r\n          </StyledTable>\r\n        </TableWrapper>\r\n        <ScrollButtonContainer>\r\n          <Button variant=\"text\" onClick={scrollToTop}>\r\n            {t('To Top')}\r\n            <ChevronUpIcon color=\"primary\" />\r\n          </Button>\r\n        </ScrollButtonContainer>\r\n      </TableContainer>\r\n    </Container>\r\n  )\r\n}\r\n\r\nexport default FarmTable\r\n","import React from 'react'\r\nimport styled from 'styled-components'\r\nimport { useLocation, Link, useRouteMatch } from 'react-router-dom'\r\nimport { ButtonMenu, ButtonMenuItem, NotificationDot } from '@pancakeswap/uikit'\r\nimport { useTranslation } from 'contexts/Localization'\r\n\r\ninterface FarmTabButtonsProps {\r\n  hasStakeInFinishedFarms: boolean\r\n}\r\n\r\nconst FarmTabButtons: React.FC<FarmTabButtonsProps> = ({ hasStakeInFinishedFarms }) => {\r\n  const { url } = useRouteMatch()\r\n  const location = useLocation()\r\n  const { t } = useTranslation()\r\n\r\n  let activeIndex\r\n  switch (location.pathname) {\r\n    case '/farms':\r\n      activeIndex = 0\r\n      break\r\n    case '/farms/history':\r\n      activeIndex = 1\r\n      break\r\n    case '/farms/archived':\r\n      activeIndex = 2\r\n      break\r\n    default:\r\n      activeIndex = 0\r\n      break\r\n  }\r\n\r\n  return (\r\n    <Wrapper>\r\n      <ButtonMenu activeIndex={activeIndex} scale=\"sm\" variant=\"subtle\">\r\n        <ButtonMenuItem as={Link} to={`${url}`}>\r\n          {t('Live')}\r\n        </ButtonMenuItem>\r\n        <NotificationDot show={hasStakeInFinishedFarms}>\r\n          <ButtonMenuItem as={Link} to={`${url}/history`}>\r\n            {t('Finished')}\r\n          </ButtonMenuItem>\r\n        </NotificationDot>\r\n      </ButtonMenu>\r\n    </Wrapper>\r\n  )\r\n}\r\n\r\nexport default FarmTabButtons\r\n\r\nconst Wrapper = styled.div`\r\n  display: flex;\r\n  justify-content: center;\r\n  align-items: center;\r\n\r\n  a {\r\n    padding-left: 12px;\r\n    padding-right: 12px;\r\n  }\r\n\r\n  ${({ theme }) => theme.mediaQueries.sm} {\r\n    margin-left: 16px;\r\n  }\r\n`\r\n","import React from 'react'\r\nimport styled from 'styled-components'\r\nimport { ListViewIcon, CardViewIcon, IconButton } from '@pancakeswap/uikit'\r\nimport { ViewMode } from '../types'\r\n\r\ninterface ToggleViewProps {\r\n  viewMode: ViewMode\r\n  onToggle: (mode: ViewMode) => void\r\n}\r\n\r\nconst Container = styled.div`\r\n  margin-left: -8px;\r\n\r\n  ${({ theme }) => theme.mediaQueries.sm} {\r\n    margin-left: 0;\r\n  }\r\n`\r\n\r\nconst ToggleView: React.FunctionComponent<ToggleViewProps> = ({ viewMode, onToggle }) => {\r\n  const handleToggle = (mode: ViewMode) => {\r\n    if (viewMode !== mode) {\r\n      onToggle(mode)\r\n    }\r\n  }\r\n\r\n  return (\r\n    <Container>\r\n      <IconButton variant=\"text\" scale=\"sm\" id=\"clickFarmCardView\" onClick={() => handleToggle(ViewMode.CARD)}>\r\n        <CardViewIcon color={viewMode === ViewMode.CARD ? 'primary' : 'textDisabled'} />\r\n      </IconButton>\r\n      <IconButton variant=\"text\" scale=\"sm\" id=\"clickFarmTableView\" onClick={() => handleToggle(ViewMode.TABLE)}>\r\n        <ListViewIcon color={viewMode === ViewMode.TABLE ? 'primary' : 'textDisabled'} />\r\n      </IconButton>\r\n    </Container>\r\n  )\r\n}\r\n\r\nexport default ToggleView\r\n","import React, { useEffect, useCallback, useState, useMemo, useRef } from 'react'\r\nimport { Route, useRouteMatch, useLocation, NavLink } from 'react-router-dom'\r\nimport BigNumber from 'bignumber.js'\r\nimport { useWeb3React } from '@web3-react/core'\r\nimport { Image, Heading, RowType, Toggle, Text, Button, ArrowForwardIcon } from '@pancakeswap/uikit'\r\nimport { ChainId } from '@pancakeswap/sdk'\r\nimport styled from 'styled-components'\r\nimport FlexLayout from 'components/Layout/Flex'\r\nimport Page from 'components/Layout/Page'\r\nimport { useFarms, usePollFarmsData, usePriceCakeBusd } from 'state/hooks'\r\nimport usePersistState from 'hooks/usePersistState'\r\nimport { Farm } from 'state/types'\r\nimport { useTranslation } from 'contexts/Localization'\r\nimport { getBalanceNumber } from 'utils/formatBalance'\r\nimport { getFarmApr } from 'utils/apr'\r\nimport { orderBy } from 'lodash'\r\nimport isArchivedPid from 'utils/farmHelpers'\r\nimport { latinise } from 'utils/latinise'\r\nimport PageHeader from 'components/PageHeader'\r\nimport SearchInput from 'components/SearchInput'\r\nimport Select, { OptionProps } from 'components/Select/Select'\r\nimport FarmCard, { FarmWithStakedValue } from './components/FarmCard/FarmCard'\r\nimport Table from './components/FarmTable/FarmTable'\r\nimport FarmTabButtons from './components/FarmTabButtons'\r\nimport { RowProps } from './components/FarmTable/Row'\r\nimport ToggleView from './components/ToggleView/ToggleView'\r\nimport { DesktopColumnSchema, ViewMode } from './components/types'\r\n\r\nconst ControlContainer = styled.div`\r\n  display: flex;\r\n  width: 100%;\r\n  align-items: center;\r\n  position: relative;\r\n  justify-content: space-between;\r\n  flex-direction: column;\r\n  margin-bottom: 32px;\r\n\r\n  ${({ theme }) => theme.mediaQueries.sm} {\r\n    flex-direction: row;\r\n    flex-wrap: wrap;\r\n    padding: 16px 32px;\r\n    margin-bottom: 0;\r\n  }\r\n`\r\n\r\nconst ToggleWrapper = styled.div`\r\n  display: flex;\r\n  align-items: center;\r\n  margin-left: 10px;\r\n\r\n  ${Text} {\r\n    margin-left: 8px;\r\n  }\r\n`\r\n\r\nconst LabelWrapper = styled.div`\r\n  > ${Text} {\r\n    font-size: 12px;\r\n  }\r\n`\r\n\r\nconst FilterContainer = styled.div`\r\n  display: flex;\r\n  align-items: center;\r\n  width: 100%;\r\n  padding: 8px 0px;\r\n\r\n  ${({ theme }) => theme.mediaQueries.sm} {\r\n    width: auto;\r\n    padding: 0;\r\n  }\r\n`\r\n\r\nconst ViewControls = styled.div`\r\n  flex-wrap: wrap;\r\n  justify-content: space-between;\r\n  display: flex;\r\n  align-items: center;\r\n  width: 100%;\r\n\r\n  > div {\r\n    padding: 8px 0px;\r\n  }\r\n\r\n  ${({ theme }) => theme.mediaQueries.sm} {\r\n    justify-content: flex-start;\r\n    width: auto;\r\n\r\n    > div {\r\n      padding: 0;\r\n    }\r\n  }\r\n`\r\n\r\nconst StyledImage = styled(Image)`\r\n  margin-left: auto;\r\n  margin-right: auto;\r\n  margin-top: 58px;\r\n`\r\nconst NUMBER_OF_FARMS_VISIBLE = 12\r\n\r\nconst getDisplayApr = (cakeRewardsApr?: number, lpRewardsApr?: number) => {\r\n  if (cakeRewardsApr && lpRewardsApr) {\r\n    return (cakeRewardsApr + lpRewardsApr).toLocaleString('en-US', { maximumFractionDigits: 2 })\r\n  }\r\n  if (cakeRewardsApr) {\r\n    return cakeRewardsApr.toLocaleString('en-US', { maximumFractionDigits: 2 })\r\n  }\r\n  return null\r\n}\r\n\r\nconst Farms: React.FC = () => {\r\n  const { path } = useRouteMatch()\r\n  const { pathname } = useLocation()\r\n  const { t } = useTranslation()\r\n  const { data: farmsLP, userDataLoaded } = useFarms()\r\n  const cakePrice = usePriceCakeBusd()\r\n  const [query, setQuery] = useState('')\r\n  const [viewMode, setViewMode] = usePersistState(ViewMode.TABLE, { localStorageKey: 'pancake_farm_view' })\r\n  const { account } = useWeb3React()\r\n  const [sortOption, setSortOption] = useState('hot')\r\n\r\n  const isArchived = pathname.includes('archived')\r\n  const isInactive = pathname.includes('history')\r\n  const isActive = !isInactive && !isArchived\r\n\r\n  usePollFarmsData(isArchived)\r\n\r\n  // Users with no wallet connected should see 0 as Earned amount\r\n  // Connected users should see loading indicator until first userData has loaded\r\n  const userDataReady = !account || (!!account && userDataLoaded)\r\n\r\n\r\n  const [stakedOnly, setStakedOnly] = useState(!isActive)\r\n  useEffect(() => {\r\n    setStakedOnly(!isActive)\r\n  }, [isActive])\r\n\r\n  const activeFarms = farmsLP.filter((farm) => farm.pid !== 0 && farm.multiplier !== '0X' && !isArchivedPid(farm.pid))\r\n  const inactiveFarms = farmsLP.filter((farm) => farm.pid !== 0 && farm.multiplier === '0X' && !isArchivedPid(farm.pid))\r\n  const archivedFarms = farmsLP.filter((farm) => isArchivedPid(farm.pid))\r\n\r\n  const stakedOnlyFarms = activeFarms.filter(\r\n    (farm) => farm.userData && new BigNumber(farm.userData.stakedBalance).isGreaterThan(0),\r\n  )\r\n\r\n  const stakedInactiveFarms = inactiveFarms.filter(\r\n    (farm) => farm.userData && new BigNumber(farm.userData.stakedBalance).isGreaterThan(0),\r\n  )\r\n\r\n  const stakedArchivedFarms = archivedFarms.filter(\r\n    (farm) => farm.userData && new BigNumber(farm.userData.stakedBalance).isGreaterThan(0),\r\n  )\r\n\r\n  const farmsList = useCallback(\r\n    (farmsToDisplay: Farm[]): FarmWithStakedValue[] => {\r\n      let farmsToDisplayWithAPR: FarmWithStakedValue[] = farmsToDisplay.map((farm) => {\r\n        if (!farm.lpTotalInQuoteToken || !farm.quoteToken.busdPrice) {\r\n          return farm\r\n        }\r\n        const totalLiquidity = new BigNumber(farm.lpTotalInQuoteToken).times(farm.quoteToken.busdPrice)\r\n        const { cakeRewardsApr, lpRewardsApr } = isActive\r\n          ? getFarmApr(new BigNumber(farm.poolWeight), cakePrice, totalLiquidity, farm.lpAddresses[ChainId.MAINNET])\r\n          : { cakeRewardsApr: 0, lpRewardsApr: 0 }\r\n\r\n        return { ...farm, apr: cakeRewardsApr, lpRewardsApr, liquidity: totalLiquidity }\r\n      })\r\n\r\n      if (query) {\r\n        const lowercaseQuery = latinise(query.toLowerCase())\r\n        farmsToDisplayWithAPR = farmsToDisplayWithAPR.filter((farm: FarmWithStakedValue) => {\r\n          return latinise(farm.lpSymbol.toLowerCase()).includes(lowercaseQuery)\r\n        })\r\n      }\r\n      return farmsToDisplayWithAPR\r\n    },\r\n    [cakePrice, query, isActive],\r\n  )\r\n\r\n  const handleChangeQuery = (event: React.ChangeEvent<HTMLInputElement>) => {\r\n    setQuery(event.target.value)\r\n  }\r\n\r\n  const loadMoreRef = useRef<HTMLDivElement>(null)\r\n\r\n  const [numberOfFarmsVisible, setNumberOfFarmsVisible] = useState(NUMBER_OF_FARMS_VISIBLE)\r\n  const [observerIsSet, setObserverIsSet] = useState(false)\r\n\r\n  const farmsStakedMemoized = useMemo(() => {\r\n    let farmsStaked = []\r\n\r\n    const sortFarms = (farms: FarmWithStakedValue[]): FarmWithStakedValue[] => {\r\n      switch (sortOption) {\r\n        case 'apr':\r\n          return orderBy(farms, (farm: FarmWithStakedValue) => farm.apr + farm.lpRewardsApr, 'desc')\r\n        case 'multiplier':\r\n          return orderBy(\r\n            farms,\r\n            (farm: FarmWithStakedValue) => (farm.multiplier ? Number(farm.multiplier.slice(0, -1)) : 0),\r\n            'desc',\r\n          )\r\n        case 'earned':\r\n          return orderBy(\r\n            farms,\r\n            (farm: FarmWithStakedValue) => (farm.userData ? Number(farm.userData.earnings) : 0),\r\n            'desc',\r\n          )\r\n        case 'liquidity':\r\n          return orderBy(farms, (farm: FarmWithStakedValue) => Number(farm.liquidity), 'desc')\r\n        default:\r\n          return farms\r\n      }\r\n    }\r\n\r\n    if (isActive) {\r\n      farmsStaked = stakedOnly ? farmsList(stakedOnlyFarms) : farmsList(activeFarms)\r\n    }\r\n    if (isInactive) {\r\n      farmsStaked = stakedOnly ? farmsList(stakedInactiveFarms) : farmsList(inactiveFarms)\r\n    }\r\n    if (isArchived) {\r\n      farmsStaked = stakedOnly ? farmsList(stakedArchivedFarms) : farmsList(archivedFarms)\r\n    }\r\n\r\n    return sortFarms(farmsStaked).slice(0, numberOfFarmsVisible)\r\n  }, [\r\n    sortOption,\r\n    activeFarms,\r\n    farmsList,\r\n    inactiveFarms,\r\n    archivedFarms,\r\n    isActive,\r\n    isInactive,\r\n    isArchived,\r\n    stakedArchivedFarms,\r\n    stakedInactiveFarms,\r\n    stakedOnly,\r\n    stakedOnlyFarms,\r\n    numberOfFarmsVisible,\r\n  ])\r\n\r\n  useEffect(() => {\r\n    const showMoreFarms = (entries) => {\r\n      const [entry] = entries\r\n      if (entry.isIntersecting) {\r\n        setNumberOfFarmsVisible((farmsCurrentlyVisible) => farmsCurrentlyVisible + NUMBER_OF_FARMS_VISIBLE)\r\n      }\r\n    }\r\n\r\n    if (!observerIsSet) {\r\n      const loadMoreObserver = new IntersectionObserver(showMoreFarms, {\r\n        rootMargin: '0px',\r\n        threshold: 1,\r\n      })\r\n      loadMoreObserver.observe(loadMoreRef.current)\r\n      setObserverIsSet(true)\r\n    }\r\n  }, [farmsStakedMemoized, observerIsSet])\r\n\r\n  const rowData = farmsStakedMemoized.map((farm) => {\r\n    const { token, quoteToken } = farm\r\n    const tokenAddress = token.address\r\n    const quoteTokenAddress = quoteToken.address\r\n    const lpLabel = farm.lpSymbol && farm.lpSymbol.split(' ')[0].toUpperCase().replace('PANCAKE', '')\r\n\r\n    const row: RowProps = {\r\n      apr: {\r\n        value: getDisplayApr(farm.apr, farm.lpRewardsApr),\r\n        multiplier: farm.multiplier,\r\n        lpLabel,\r\n        tokenAddress,\r\n        quoteTokenAddress,\r\n        cakePrice,\r\n        originalValue: farm.apr,\r\n      },\r\n      farm: {\r\n        label: lpLabel,\r\n        pid: farm.pid,\r\n        token: farm.token,\r\n        quoteToken: farm.quoteToken,\r\n      },\r\n      earned: {\r\n        earnings: getBalanceNumber(new BigNumber(farm.userData.earnings)),\r\n        pid: farm.pid,\r\n      },\r\n      liquidity: {\r\n        liquidity: farm.liquidity,\r\n      },\r\n      multiplier: {\r\n        multiplier: farm.multiplier,\r\n      },\r\n      details: farm,\r\n    }\r\n\r\n    return row\r\n  })\r\n\r\n  const renderContent = (): JSX.Element => {\r\n    if (viewMode === ViewMode.TABLE && rowData.length) {\r\n      const columnSchema = DesktopColumnSchema\r\n\r\n      const columns = columnSchema.map((column) => ({\r\n        id: column.id,\r\n        name: column.name,\r\n        label: column.label,\r\n        sort: (a: RowType<RowProps>, b: RowType<RowProps>) => {\r\n          switch (column.name) {\r\n            case 'farm':\r\n              return b.id - a.id\r\n            case 'apr':\r\n              if (a.original.apr.value && b.original.apr.value) {\r\n                return Number(a.original.apr.value) - Number(b.original.apr.value)\r\n              }\r\n\r\n              return 0\r\n            case 'earned':\r\n              return a.original.earned.earnings - b.original.earned.earnings\r\n            default:\r\n              return 1\r\n          }\r\n        },\r\n        sortable: column.sortable,\r\n      }))\r\n\r\n      return <Table data={rowData} columns={columns} userDataReady={userDataReady} />\r\n    }\r\n\r\n    return (\r\n      <div>\r\n        <FlexLayout>\r\n          <Route exact path={`${path}`}>\r\n            {farmsStakedMemoized.map((farm) => (\r\n              <FarmCard\r\n                key={farm.pid}\r\n                farm={farm}\r\n                displayApr={getDisplayApr(farm.apr, farm.lpRewardsApr)}\r\n                cakePrice={cakePrice}\r\n                account={account}\r\n                removed={false}\r\n              />\r\n            ))}\r\n          </Route>\r\n          <Route exact path={`${path}/history`}>\r\n            {farmsStakedMemoized.map((farm) => (\r\n              <FarmCard\r\n                key={farm.pid}\r\n                farm={farm}\r\n                displayApr={getDisplayApr(farm.apr, farm.lpRewardsApr)}\r\n                cakePrice={cakePrice}\r\n                account={account}\r\n                removed\r\n              />\r\n            ))}\r\n          </Route>\r\n          <Route exact path={`${path}/archived`}>\r\n            {farmsStakedMemoized.map((farm) => (\r\n              <FarmCard\r\n                key={farm.pid}\r\n                farm={farm}\r\n                displayApr={getDisplayApr(farm.apr, farm.lpRewardsApr)}\r\n                cakePrice={cakePrice}\r\n                account={account}\r\n                removed\r\n              />\r\n            ))}\r\n          </Route>\r\n        </FlexLayout>\r\n      </div>\r\n    )\r\n  }\r\n\r\n  const handleSortOptionChange = (option: OptionProps): void => {\r\n    setSortOption(option.value)\r\n  }\r\n\r\n  return (\r\n    <>\r\n      <PageHeader>\r\n        <Heading color=\"secondary\" style={{ fontSize: \"50px\" }}>\r\n          {t('Farms')}\r\n        </Heading>\r\n        <Heading color=\"text\" style={{ fontSize: \"16px\" }}>\r\n          {t('Stake LP tokens to earn Nextep.')}\r\n        </Heading>\r\n      </PageHeader>\r\n      <Page>\r\n        <ControlContainer>\r\n          <ViewControls>\r\n            <ToggleView viewMode={viewMode} onToggle={(mode: ViewMode) => setViewMode(mode)} />\r\n            <ToggleWrapper>\r\n              <Toggle checked={stakedOnly} onChange={() => setStakedOnly(!stakedOnly)} scale=\"sm\" />\r\n              <Text> {t('Staked only')}</Text>\r\n            </ToggleWrapper>\r\n            <FarmTabButtons hasStakeInFinishedFarms={stakedInactiveFarms.length > 0} />\r\n          </ViewControls>\r\n          <FilterContainer>\r\n            <LabelWrapper>\r\n              <Text textTransform=\"uppercase\">{t('Sort by')}</Text>\r\n              <Select\r\n                options={[\r\n                  {\r\n                    label: t('Hot'),\r\n                    value: 'hot',\r\n                  },\r\n                  {\r\n                    label: t('APR'),\r\n                    value: 'apr',\r\n                  },\r\n                  {\r\n                    label: t('Multiplier'),\r\n                    value: 'multiplier',\r\n                  },\r\n                  {\r\n                    label: t('Earned'),\r\n                    value: 'earned',\r\n                  },\r\n                  {\r\n                    label: t('Liquidity'),\r\n                    value: 'liquidity',\r\n                  },\r\n                ]}\r\n                onChange={handleSortOptionChange}\r\n              />\r\n            </LabelWrapper>\r\n            <LabelWrapper style={{ marginLeft: 16 }}>\r\n              <Text textTransform=\"uppercase\">{t('Search')}</Text>\r\n              <SearchInput onChange={handleChangeQuery} placeholder=\"Search Farms\" />\r\n            </LabelWrapper>\r\n          </FilterContainer>\r\n        </ControlContainer>\r\n        {renderContent()}\r\n        <div ref={loadMoreRef} />\r\n      </Page>\r\n    </>\r\n  )\r\n}\r\n\r\nexport default Farms\r\n"],"sourceRoot":""}